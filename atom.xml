<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better Programmer</title>
  <subtitle>Where best programming happens</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.kiyanpro.com/"/>
  <updated>2016-09-26T03:45:42.000Z</updated>
  <id>http://blog.kiyanpro.com/</id>
  
  <author>
    <name>FreeTymeKiyan</name>
    <email>FreeTymeSunKiyan@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Back of the Envelope Calculation</title>
    <link href="http://blog.kiyanpro.com/2016/09/21/system_design/back-of-the-envelope-calculation/"/>
    <id>http://blog.kiyanpro.com/2016/09/21/system_design/back-of-the-envelope-calculation/</id>
    <published>2016-09-22T05:48:48.000Z</published>
    <updated>2016-09-26T03:45:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>So, I continued the journey on learning about System Design and found another very good resource. It is a talk by Jeff Dean at Stanford named <em>Software Engineering Advice from Building Large-Scale Distributed Systems</em>. In this talk, Jeff Dean shared the lessons and tips learned from his various kinds of experience.  </p>
<p>One important skill he pointed out in the talk is the ability to estimate performance of a system design. Why is it important? Because this skill actually allows you to choose the “best” solution, according to the problem definition and the meaning of “best”, without building it.   </p>
<p>Some fundamental knowledge is required to grasp this method:  </p>
<ol>
<li>Time costs for some basic steps</li>
<li>Decomposition of a design</li>
</ol>
<h3 id="Time-Cost"><a href="#Time-Cost" class="headerlink" title="Time Cost"></a>Time Cost</h3><p>Jeff provided a brief table for the costs. This table is lucid overall but some rows in it might be unclear. I will show the table first and try to explain those rows.  </p>
<h4 id="Time-Cost-Table"><a href="#Time-Cost-Table" class="headerlink" title="Time Cost Table"></a>Time Cost Table</h4><p>Table 1.1 Numbers Everyone Should Know  </p>
<table>
<thead>
<tr>
<th style="text-align:left">Basic Step</th>
<th style="text-align:center">Time</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">L1 cache reference</td>
<td style="text-align:center">0.5ns</td>
</tr>
<tr>
<td style="text-align:left">Branch mispredict</td>
<td style="text-align:center">5ns</td>
</tr>
<tr>
<td style="text-align:left">L2 cache reference</td>
<td style="text-align:center">7ns</td>
</tr>
<tr>
<td style="text-align:left">Mutex lock/unlock</td>
<td style="text-align:center">100ns</td>
</tr>
<tr>
<td style="text-align:left">Main memory reference</td>
<td style="text-align:center">100ns</td>
</tr>
<tr>
<td style="text-align:left">Compress 1K bytes with Zippy</td>
<td style="text-align:center">10,000ns</td>
</tr>
<tr>
<td style="text-align:left">Send 2K bytes over 1Gbps network</td>
<td style="text-align:center">20,000ns</td>
</tr>
<tr>
<td style="text-align:left">Read 1 MB sequentially from memory</td>
<td style="text-align:center">250,000ns</td>
</tr>
<tr>
<td style="text-align:left">Round trip within same datacenter</td>
<td style="text-align:center">500,000ns</td>
</tr>
<tr>
<td style="text-align:left">Disk seek</td>
<td style="text-align:center">10,000,000ns</td>
</tr>
<tr>
<td style="text-align:left">Read 1 MB sequentially from network</td>
<td style="text-align:center">10,000,000ns</td>
</tr>
<tr>
<td style="text-align:left">Read 1 MB sequentially from disk</td>
<td style="text-align:center">30,000,000ns</td>
</tr>
<tr>
<td style="text-align:left">Send packet CA-&gt;Netherlands-&gt;CA</td>
<td style="text-align:center">150,000,000ns</td>
</tr>
</tbody>
</table>
<h4 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h4><p>We say and hear all the time that L1 cache is the fastest, then the L2 cache, then the main memory, and finally the disk. Here in the table we can find data support for this point.  </p>
<p>As main memory of a machine becomes larger and larger nowadays, a clear trend in system design is to put performance significant data in memory rather than on disk. For example, in Elasticsearch, I use in-memory aggregation to boost the query process and avoid disk seeks. As a result, the system can return 1000 hits in 10 to 20ms, which is almost 100x faster than a normal query(around 1 sec). Another example would be the widely use of in-memory cache, such as MemCache and Redis, which can save us enormous amount of disk hits from read requests send to DB.  </p>
<p>What is Branch mispredict?  </p>
<p>What is Mutex lock/unlock? Why important?</p>
<p>What is Zippy? Why is it important?  </p>
<p>“Send 2K bytes over 1Gbps network” is easy. Just do the math. 2 <em> 10^3 / (1 </em> 10^9) = 2 <em> 10^(-6)s = 2 </em> 10^3ns, not 2 * 10^4ns… What is the problem here?  </p>
<p>Read 1 MB sequentially from memory.   </p>
<p>Round trip within same datacenter.   </p>
<p>Read 1 MB sequentially from network  </p>
<p>Read 1 MB sequentially from disk  </p>
<p>Send packet CA-&gt;Netherlands-&gt;CA, 150ms. That is a round trip between the west of North America and the west of Europe. Good to know it. We should take this into consideration if we need to build some global distributed services. Network takes time.  </p>
<h3 id="Decomposition-a-Design"><a href="#Decomposition-a-Design" class="headerlink" title="Decomposition a Design"></a>Decomposition a Design</h3><p>I think it is rough to just summarize how to decompose a design since it is based on the knowledge of operation systems and the actual experience on building a performance significant system. For those who do not have them, this topic would be better explained in examples.  </p>
<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><p>For example,   </p>
<p>Another example,</p>
<p>Find more examples resources. </p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this post I shared a method by Jeff Dean to estimate time cost of a design, named “Back of the Envelope Calculation”. The estimation consists of mainly two step: 1) Knowing the time cost of basic steps 2) Decomposing a design into those basic steps. Then we will be able to get a fairly intuitive assessment on our possible designs and choose the best one.  </p>
<p>Other interesting topics in this talk:<br>Problems of Real Hardware  </p>
<p>Google Engineering Environment  </p>
<p>Designing Software Systems<br>  Principles<br>  Get Advice Early<br>  Interfaces<br>  Protocols<br>  Efficiency</p>
<p>The “Back of the Envelope Calculation” here focuses on time cost. Another interesting topic is memory usage estimation, which is also widely used before actual implementation. I remembered seeing my former tech lead doing this on a tiny piece of post-it paper and was totally fascinated. I told myself I would also be that kind of engineer one day. So stay tuned on the next topic: Memory Usage Estimation. </p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href=""></a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;So, I continued the journey on learning about System Design and found another very good resource. It is a talk by Jeff Dean at Stanford n
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="System Design" scheme="http://blog.kiyanpro.com/tags/System-Design/"/>
    
  </entry>
  
  <entry>
    <title>Ways to Build A Distributed System</title>
    <link href="http://blog.kiyanpro.com/2016/09/13/system_design/Ways-to-Build-A-Distributed-System/"/>
    <id>http://blog.kiyanpro.com/2016/09/13/system_design/Ways-to-Build-A-Distributed-System/</id>
    <published>2016-09-13T23:58:24.000Z</published>
    <updated>2017-07-04T19:03:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Every engineer should learn about distributed system design, since it is not only the path to next career level, but a necessary ability to build a large-scale application according to use cases and specifications as well. Without a proper design, it would be impossible to implement and manage such a system afterwards. </p>
<p>Today I read through “The Twitter Problem”<sup><a href="#References">[1]</a></sup> on hiredintech.com and found it truly useful and easy to understand. This post is a summary on the classic problems and solutions when building a scalable system. These problems are generally met in most of the large applications and are well solved by those extraordinary predecessors. </p>
<h2 id="Techniques"><a href="#Techniques" class="headerlink" title="Techniques"></a>Techniques</h2><p>These techniques are divided into two parts: 1) Handling user requests 2) Storing the data. </p>
<h3 id="Handling-user-requests"><a href="#Handling-user-requests" class="headerlink" title="Handling user requests"></a>Handling user requests</h3><p>Suppose we already know what kind of system, how many requests approximately, and how complex the requests are. What are the ways to handle these requests?</p>
<h4 id="Comparing-the-technologies"><a href="#Comparing-the-technologies" class="headerlink" title="Comparing the technologies"></a>Comparing the technologies</h4><p>One aspect can be the technologies used to implement the application. Some technologies are specially designed for high concurrency situation with less memory usage. This can enhance the load handled by a single machine. With some research on these technologies, we can know the number of requests that can be handled by a single machine for each of them. Then pick the one that performs the best. </p>
<p>One possible problem for this pre-research is time consuming. But it is worth it since the comparison result is reusable for the next design. Another downside can be that the best technology chosen may not be familiar to the team, or even not easier to pick up at all. All these factors should be considered before making the final decision. </p>
<h4 id="Scaling-Up"><a href="#Scaling-Up" class="headerlink" title="Scaling Up"></a>Scaling Up</h4><p>Scailing up means improving a single machine. Think about the aspects you can improve, such as the CPU, the memory, the disk and etc. Examples are like replace CPU with more cores, increase the size of memory, and upgrade to SSD drive. </p>
<p>This approach is useful in some cases, but after a given point, the hardware of one machine just is not capable of handling all the requests. It would also be a single point of failure if the machine goes down. </p>
<h4 id="Scaling-Out"><a href="#Scaling-Out" class="headerlink" title="Scaling Out"></a>Scaling Out</h4><p>Scaling out basically means adding more nodes and building a cluster. The load is distributed to a number of machines instead of one. </p>
<p>The approach is better generally, as it avoids single point failure and is easy to scale. When the current cluster cannot handle the load well, we can config a new machine and add it to the cluster. And if we know how many requests one node can handle, we can easily estimate how many nodes we need for a cluster as well. </p>
<h4 id="Software-Load-Balancer"><a href="#Software-Load-Balancer" class="headerlink" title="Software Load Balancer"></a>Software Load Balancer</h4><p>We can run a software load balancer on a machine in front of the application cluster. With proper configuration, the load balancer will forward the request to the actual node behind it in the cluster, thus distributing the load across. Classic software load balancers are nginx and HAProxy. Some cloud providers like AWS also provide traffic load balancing as a service. </p>
<p>Software load balancer definitely adds resiliency to an application. It is almost a must-have in distributed systems. But it can also be the bottleneck if the number of requests is too high and exceeds the capability of one single load balancer node. </p>
<h4 id="DNS-Load-Balancer"><a href="#DNS-Load-Balancer" class="headerlink" title="DNS Load Balancer"></a>DNS Load Balancer</h4><p>We can config a DNS server to parse domain to different hosts. This DNS load balancer is in front of software load balancer and can forward requests to different software load balancers. In this way, the system can handle even more requests and further scale out. </p>
<h4 id="Auto-Scaling"><a href="#Auto-Scaling" class="headerlink" title="Auto Scaling"></a>Auto Scaling</h4><p>Auto scaling is the ability to adjust the number of nodes in a cluster according current traffic level. Services like AWS and Heroku offer this kind of support. </p>
<p>This technique is specifically useful when it comes to unusual high traffic, where caching is not that efficient. The system will respond to the traffic and add more nodes if the traffic is too high, then reclaim those nodes when the traffic goes down to normal. </p>
<h3 id="Storing-the-data"><a href="#Storing-the-data" class="headerlink" title="Storing the data"></a>Storing the data</h3><h4 id="Estimation-on-data-sizes"><a href="#Estimation-on-data-sizes" class="headerlink" title="Estimation on data sizes"></a>Estimation on data sizes</h4><p>Assume that we know the relations between our data objects, we can assess the approximate size of the data to be stored. For example, in a simple twitter problem, we have 10 million users and each of them post 1 tweet per day. Each tweet contains 140 characters. If we assume 2 bytes per character, it will be 2 <em> 140 </em> 10bln = 2.6 TB for a day. </p>
<p>After a quick analysis on all possible data to be stored, there can be some data that takes up majority of the storage space. It is important to have a rough idea about the size of the data that the system will need to handle. Appropriate design decisions base on this. </p>
<h4 id="Adding-Indexes"><a href="#Adding-Indexes" class="headerlink" title="Adding Indexes"></a>Adding Indexes</h4><p>In relational DB, adding indexes to a specific field enables executing quick queries joining tables. If we know some fields are used frequently in filtering queries, we definitely should build an index over the field to optimize the times for such queries.</p>
<p>After creating the indexes, write queries will become slightly slower. Considering the time we can save for heavy read operations it is still worth it. </p>
<h4 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h4><p>With all the read requests coming to DB, we can have several replications that hold a copy of the data each. </p>
<p>This will help only if the write operations does not increase dramatically at the same time. Otherwise, it will be complicated to sync data between primary and replications. </p>
<h4 id="Data-partitioning-Sharding"><a href="#Data-partitioning-Sharding" class="headerlink" title="Data partitioning (Sharding)"></a>Data partitioning (Sharding)</h4><p>Divide the data in some way to several databases. After that, each DB will hold only part of the data, and also, share only part of the requests. </p>
<p>If we have several databases and each of them only has part of the data, the read and write will speed up since the load is smaller. But a way should be pre-defined before partitioning. Otherwise we won’t be able to know which DB a specific request should go to. And also, because the data size is smaller for each DB, it makes administration tasks like backups faster. </p>
<h4 id="In-memory-cache"><a href="#In-memory-cache" class="headerlink" title="In-memory cache"></a>In-memory cache</h4><p>In order to handle the incoming read requests, we can add an in-memory cache in front of the relational DB. The reason why this works is that DB reads directly from disk, and it is much slower than from memory. Even if the DB has its own caching mechanisms, a separate cache layer enables us to gain more control over what to be cached and how. </p>
<p>An in-memory cache will save us a lot of direct reads to DB. And since the results of most frequent requests is cached, the system is more resilient to usual traffic peaks. </p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>These techniques from “The Twitter Problem” are described and analyzed at a very high level, so that we can have an general idea on each of them. This example also already showed what it is actually like to design a distributed system (or answer such problems in an interview). The next steps may be learning the actually theories behind each step mentioned, figuring out the reasons, and diving deep into each of those technologies. </p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="http://www.hiredintech.com/data/uploads/hiredintech_system_design_the_twitter_problem_beta.pdf" target="_blank" rel="external">The Twitter Problem, hiredintech.com</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Every engineer should learn about distributed system design, since it is not only the path to next career level, but a necessary ability 
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="System Design" scheme="http://blog.kiyanpro.com/tags/System-Design/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient Series</title>
    <link href="http://blog.kiyanpro.com/2016/04/22/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient/"/>
    <id>http://blog.kiyanpro.com/2016/04/22/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient/</id>
    <published>2016-04-23T01:48:48.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I finished reading the book <em>Java SE 8 For the Really Impatient</em>. This book covers the main features introduced in Java SE 8, such as Lambda Expressions and Stream API. Also it shows some sweet small features that benefit every day work greatly, namely, the new d ate and time API, the concurrency enhancements, and etc. </p>
<p>This post is a guide for the reading notes of this series. You can jump right into a specific topic from here by clicking the numbers.<br><br></p>
<ul>
<li>Lambda Expressions: <a href="http://blog.kiyanpro.com/2016/03/15/java/Java-SE-8-For-the-Really-Impatient-Note-1/" title="Note 1">1</a>. Talks about the fundamentals of lambda expressions in Java SE 8. </li>
<li>The Stream API: <a href="http://blog.kiyanpro.com/2016/03/16/java/Java-SE-8-For-the-Really-Impatient-Note-2/" title="Note 2">2</a>, <a href="http://blog.kiyanpro.com/2016/03/17/java/Java-SE-8-For-the-Really-Impatient-Note-3/" title="Note 3">3</a>, <a href="http://blog.kiyanpro.com/2016/03/21/java/Java-SE-8-For-the-Really-Impatient-Note-4/" title="Note 4">4</a>. Complete introduction on the Stream API. </li>
<li>Programming with Lambdas： <a href="http://blog.kiyanpro.com/2016/03/22/java/Java-SE-8-For-the-Really-Impatient-Note-5/" title="Note 5">5</a>, <a href="http://blog.kiyanpro.com/2016/03/23/java/Java-SE-8-For-the-Really-Impatient-Note-6/" title="Note 6">6</a>. Explains how to make use of lambda expressions and functional interfaces when building libraries. </li>
<li>The New Date and Time API: <a href="http://blog.kiyanpro.com/2016/03/24/java/Java-SE-8-For-the-Really-Impatient-Note-7/" title="Note 7">7</a>, <a href="http://blog.kiyanpro.com/2016/03/25/java/Java-SE-8-For-the-Really-Impatient-Note-8/" title="Note 8">8</a>. Introduces the new API, and how it iteracts with the old one. </li>
<li>Concurrency Enhancements: <a href="http://blog.kiyanpro.com/2016/03/29/java/Java-SE-8-For-the-Really-Impatient-Note-9/" title="Note 9">9</a>, <a href="http://blog.kiyanpro.com/2016/03/29/java/Java-SE-8-For-the-Really-Impatient-Note-10/" title="Note 10">10</a>, <a href="http://blog.kiyanpro.com/2016/03/30/java/Java-SE-8-For-the-Really-Impatient-Note-11/" title="Note 11">11</a>. Enhancements on <code>java.util.concurrent</code>. </li>
<li>Miscellaneous Goodies: <a href="http://blog.kiyanpro.com/2016/03/31/java/Java-SE-8-For-the-Really-Impatient-Note-12/" title="Note 12">12</a>, <a href="http://blog.kiyanpro.com/2016/04/04/java/Java-SE-8-For-the-Really-Impatient-Note-13/" title="Note 13">13</a>. Improvements on String, Number classes, Math, Collections, File IO, Annotations, and etc. </li>
</ul>
<p>I skipped two chapters that I do not think I will use in near future: 1) Chapter 4 JavaFX 2) Chapter 7 the Nashorn JavaScript Engine. Also, Chapter 9 is specially for the good features in Java 7. I think the only way one grasps more of a language or skill is to grow with it. As Java is still evolving, we definitely should keep a close pace and embrace the improvements. You can read these chapters in the original book. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, I finished reading the book &lt;em&gt;Java SE 8 For the Really Impatient&lt;/em&gt;. This book covers the main features introduced in Java 
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Philosophical Words in Kungfu Panda 3</title>
    <link href="http://blog.kiyanpro.com/2016/04/18/words/Philosophical-Words-in-Kungfu-Panda-3/"/>
    <id>http://blog.kiyanpro.com/2016/04/18/words/Philosophical-Words-in-Kungfu-Panda-3/</id>
    <published>2016-04-18T21:45:50.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>My wife and I just watched Kungfu Panda 3 last weekend. Besides the fun parts, there are some words in it that I know they are right, but don’t fully understand. Maybe you feel the same. Here are a list of them. </p>
<h2 id="Words"><a href="#Words" class="headerlink" title="Words"></a>Words</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>你何时才能领悟 索取越多 收获越少<br>When will you realize, the more you take, the less you have.</p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>如果你只做你力所能及的事 你就没法进步<br>If you only do what you can do you’ll never be more than you are now.</p>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>你连自己是谁都不知道<br>You don’t even know who you are.<br>你说啥 我当然知道 我是神龙大侠<br>What do you….? Of course I do. I’m the Dragon Warrior.<br>那神龙大侠究竟意味着什么呢<br>And what exactly does that mean Dragon Warrior?<br>意味着…我要四处闯荡 拳打脚踢<br>It means…you know… just going around and punching and kicking<br>保卫家园什么的<br>Defending the valley and stuff.<br>拳打脚踢<br>Punching and kicking?<br>你认为这就是乌龟大师看中你的原因吗<br>You think that is what the great Master Oogway saw for you?<br>一个五百年的预言选中了你<br>A five hundred year prophecy full-filled<br>难道就是让你耍耍花拳绣腿<br>so you can spend your days…<br>满镇子乱跑跟兔子耍帅吗<br>Kicking butt? And running through town high-fiving bunnies?</p>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>乌龟曾在一个山洞里打坐整整三十年<br>Oogway sat alone in a cave for thirty years<br>只为弄清一个问题<br>asking one question<br>我是谁<br>Who am I?</p>
<h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>我没让你变成我这样<br>I’m not trying to turn you into me.<br>我是让你变成你自己<br>I’m trying to turn you into you.</p>
<h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>但你们不必像我<br>But you don’t have to be.<br>师父当初就是这个意思 我不必把你们变成另一个我<br>That’s what Shifu meant. I don’t have to turn you into me.<br>我要做的是激发你们自身的潜能<br>I have to turn you into you!</p>
<h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>伙计们 展现出自己最好的水平就是你们真正的优势<br>You guys, your real strength comes from being the best you you can be.<br>那么 你是谁 你擅长什么<br>So, who are you? What are you good at?<br>你热衷什么 何为你的个人特色<br>What do you love? What makes you you?</p>
<h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p>我们初次见面的那一天<br>On the first day we met…<br>我看到了功夫的未来<br>I saw the future of kung fu.<br>也看到了过往<br>And the past.<br>我看到了那只能将两者合二为一的熊猫<br>I saw the panda who could unite them both.<br>这就是我选你的原因 阿宝<br>That is why I chose you, Po.<br>你结合了阴阳两极<br>Both sides of the Yin and Yang.<br>也是我真正的继承者<br>And my true successor.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Try to dive into these words and think. Think about who I am, how I can become better me, how I can help others find themselves and become better themselves. Find the real self first, then forget it and just be it. More importantly, how to combine the two sides of things, negate nothing, exlude nothing. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My wife and I just watched Kungfu Panda 3 last weekend. Besides the fun parts, there are some words in it that I know they are right, but
    
    </summary>
    
      <category term="Words" scheme="http://blog.kiyanpro.com/categories/Words/"/>
    
    
      <category term="Thoughts" scheme="http://blog.kiyanpro.com/tags/Thoughts/"/>
    
  </entry>
  
  <entry>
    <title>Marvel What Does Search Rate Mean?</title>
    <link href="http://blog.kiyanpro.com/2016/04/15/elasticsearch/Marvel-What-Does-Search-Rate-Mean/"/>
    <id>http://blog.kiyanpro.com/2016/04/15/elasticsearch/Marvel-What-Does-Search-Rate-Mean/</id>
    <published>2016-04-16T02:38:38.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Elasticsearch provides a handy monitoring tool named Marvel. It is pretty easy to setup. But when it comes to real monitoring, you will realize that those metrics in dashboard are so confusing. They are not consistent with the actual QPS you sent to the cluster. You don’t really know what they refer to. </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I googled it. But unfortunately there was no answer at that time. The only thing I got is <a href="https://discuss.elastic.co/t/marvel-what-does-the-search-rate-mean/35260" target="_blank" rel="external">a post on Marvel forum</a> where somebody was as confused as me. </p>
<p>Then I tried to find the source code of Marvel. But I couldn’t find anything either because it is not opensourced. I really think Marvel has so many more improvements needed. They really should opensource it. </p>
<p><img src="/images/search_latency_after.png" alt="Average Search Latency"><br>The answer came to me when I was struggling with the search performance. I reindexed all the data to try whether it would affect performance. To my surprise, after I changed to a single shard, the average search latency dropped from around 30ms to 7ms. And the search rate also drops to around 10k/s, which is exactly the estimation value of requests I sent to Elasticsearch cluster. All the mysteries disappeared and everything became crystal clear. </p>
<p><img src="/images/latency_before.png" alt="Marvel Dashboard"><br>The first one is “Search Rate”. When the index had 10 shards, it was about 10 times the actual requests. When the index has only 1 shard, it was almost the same as the actual request. </p>
<p>Then “Search Latency”. When the index had 10 shards, it was around 0.9ms, but the end to end latency was around 30ms. When single shard, it goes up to 1.88ms, while the end to end latency is merely 7ms. That’s probably because the amount of data of each shard increases because of fewer shards, hence the longer search in each shard. But there is no need to merge result anymore. Here, we can see how badly merging result affects search performance.</p>
<p>“Index Rate” and “Indexing Latency” are the same. </p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The meanings are listed below:</p>
<ul>
<li>Search Rate: for a single index, it’s number of lookups per second * number of shards. For multiple indices, it’s the sum of the search rate of each index. </li>
<li>Search Latency: Average latency within each shard. </li>
<li>Indexing Rate: for a single index, it’s number of indexing per second * number of shards. For multiple indices, it’s the sum of the indexing rate of each index. </li>
<li>Indexing Latency: Average latency within each shard. </li>
</ul>
<p>You can verify the conclusions above by changing the number of shards of an index and see how it changes afterwards. Feel free to let me know if there is anything wrong. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Elasticsearch provides a handy monitoring tool nam
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.kiyanpro.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 13</title>
    <link href="http://blog.kiyanpro.com/2016/04/04/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-13/"/>
    <id>http://blog.kiyanpro.com/2016/04/04/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-13/</id>
    <published>2016-04-05T01:34:48.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-8-Miscellaneous-Goodies"><a href="#Chapter-8-Miscellaneous-Goodies" class="headerlink" title="Chapter 8 Miscellaneous Goodies"></a>Chapter 8 Miscellaneous Goodies</h1><h2 id="Working-with-Files"><a href="#Working-with-Files" class="headerlink" title="Working with Files"></a>Working with Files</h2><p>Java 8 brings a small number of convenience methods that use stream for reading lines from files and for visiting directory entries. Also, there is an official way of performing Base64 encoding. </p>
<h3 id="Streams-of-Lines"><a href="#Streams-of-Lines" class="headerlink" title="Streams of Lines"></a>Streams of Lines</h3><p><code>Files.lines</code>: read the lines of a file lazily. It yields a stream of strings, one per line of input:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; lines = Files.lines(path);</div><div class="line">Optional&lt;String&gt; passwordEntry = lines.filter(s -&gt; s.contains(“password”)).findFirst();</div></pre></td></tr></table></figure></p>
<p>As soon as the first line containing password is found, no further lines are read from the underlying file. </p>
<p><code>Files.lines</code> defaults to UTF-8, unlike <code>FileReader</code> which opens files in local character encoding. You can specify other encodings by supplying a <code>Charset</code> argument. </p>
<p>The <code>Stream</code> interface extends <code>AutoCloseable</code>. The <code>Files.lines</code> method produces a stream whose <code>close</code> method closes the file. The easiest way to make sure the file in indeed closed is to use a Java 7 try-with-resources block:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (Stream&lt;String&gt; lines = Files.lines(path)) &#123;</div><div class="line">  Optional&lt;String&gt; passwordEntry = lines.filter(s -&gt; s.contains(<span class="string">"password"</span>)).findFirst();</div><div class="line">  ...</div><div class="line">&#125; <span class="comment">// The file will be closed here</span></div></pre></td></tr></table></figure></p>
<p>When a stream spawns another, the <code>close</code> methods are chained.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (Stream&lt;String&gt; filteredLines = Files.lines(path).filter(s -&gt; s.contains(<span class="string">"password"</span>))) &#123;</div><div class="line">  Optional&lt;String&gt; passwordEntry = filteredLines.findFirst();</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>When filteredLines is closed, it closes the underlying stream, which closes the underlying file. </p>
<p>Attach an <code>onClose</code> handler to be notified when the stream is closed.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (Stream&lt;String&gt; filteredLines = Files.lines(path).onClose(() -&gt; System.out.println(<span class="string">"Closing"</span>)).filter(s -&gt; s.contains(<span class="string">"password"</span>))) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>If an <code>IOException</code> occurs as the stream fetches the lines, that exception is wrapped into an <code>UncheckedIOException</code> which is thrown out of the stream operation. </p>
<p>If you want to read lines from a source other than a file, use the <code>BufferedReader.lines</code> method instead:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(url.openStream()))) &#123;</div><div class="line">  Stream&lt;String&gt; lines = reader.lines();</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>With this method, closing the resulting stream does not close the reader. So you must place the <code>BufferedReader</code> object, and not the stream object, into the header of the <code>try</code> statement.</p>
<h3 id="Streams-of-Directory-Entries"><a href="#Streams-of-Directory-Entries" class="headerlink" title="Streams of Directory Entries"></a>Streams of Directory Entries</h3><p><code>Files.list</code>: returns a <code>Stream&lt;Path&gt;</code> that reads the entries of a directory. The directory is read lazily, making it possible to efficiently process directories with huge numbers of entries.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (Stream&lt;Path&gt; entries = Files.list(pathToDirectory)) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The <code>list</code> method does not enter subdirectories. </p>
<p><code>Files.walk</code>: processes all descendants of a directory.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (Stream&lt;Path&gt; entries = Files.walk(pathToRoot)) &#123;</div><div class="line">  <span class="comment">// Contains all descendants, visited in depth-first order </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>You can limit the depth of the tree by calling <code>Files.walk(pathToRoot, depth)</code>. Both <code>walk</code> methods have a varargs parameter of type <code>FileVistOption...</code>, but there is currently only one option you can supply: <code>FOLLOW_LINKS</code> to follow symbolic links. </p>
<p>If you filter the paths returned by <code>walk</code> and your filter criterion involves the file attributes stored with a directory, such as size, creation time, or type (file, directory, symbolic link), then use the <code>find</code> method instead. Call it with a predicate function that accepts a path and a <code>BasicFileAttributes</code> object. The only advantage is efficiency, since the directory is being read anyway, the attributes are readily available. </p>
<h3 id="Base64-Encoding"><a href="#Base64-Encoding" class="headerlink" title="Base64 Encoding"></a>Base64 Encoding</h3><p>The Base64 encoding encodes a sequence of bytes into a (longer) sequence of printable ASCII characters. Java 8 provides a standard encoder and decoder. </p>
<p>Normally, an encoded string has no line breaks, but the MIME standard used for email requires a “\r\n” every 76 characters. </p>
<p>For encoding, request a <code>Base64.Encoder</code> with one of the static methods <code>getEncoder</code>, <code>getUrlEncoder</code>, or <code>getMimeEncoder</code> of the <code>Base64</code> class. </p>
<p>That class has methods to encode an array of bytes or a NIO <code>ByteBuffer</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Base64.Encoder encoder = Base64.getEncoder();</div><div class="line">String original = username + <span class="string">":"</span> + password;</div><div class="line">String encoded = encoder.encodeToString(original,getBytes(StandardCharsets.UTF-<span class="number">8</span>));</div></pre></td></tr></table></figure></p>
<p>Alternatively, you can “wrap” an output stream, so that all data sent to it is automatically encoded.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Path originalPath = ..., encodedPath = ...;</div><div class="line">Base64.Encoder encoder = Base64.getMimeEncoder();</div><div class="line"><span class="keyword">try</span> (OutputStream output = Files.newOutputStream(encodedPath)) &#123;</div><div class="line">  Files.copy(originalPath, encoder.wrap(output));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>To decode, reverse the operations:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Path encodedPath = ..., decodedPath = ...;</div><div class="line">Base64.Decoder decoder = Base64.getMimeDecoder();</div><div class="line"><span class="keyword">try</span> (InputStream input = Files.newInputStream(encodedPath)) &#123;</div><div class="line">  Files.copy(decoder.wrap(input), decodedPath);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Annotations"><a href="#Annotations" class="headerlink" title="Annotations"></a>Annotations</h2><p>Annotations are tags inserted into the source code that some tools can process. </p>
<p>Java 8 has two enhancements to annotaion processing: repeated annotations and type use annotations. Moreover, reflection has been enhanced to report method parameter names. This has the potential to simplify annotations on method parameters. </p>
<h3 id="Repeated-Annotations"><a href="#Repeated-Annotations" class="headerlink" title="Repeated Annotations"></a>Repeated Annotations</h3><p>When annotations were first created, they were envisioned to mark methods and fields for processing.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Call after construction</span></div><div class="line"><span class="meta">@PostConstruct</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fetchData</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line"><span class="comment">// Inject resource here</span></div><div class="line"><span class="meta">@Resource</span>(<span class="string">"jdbc:derby:sample"</span>)</div><div class="line"><span class="keyword">private</span> Connection conn;</div></pre></td></tr></table></figure></p>
<p>In this context, it made no sense to apply same annotation twice. You can’t inject a field in two ways. Different annotations on the same element are fine and quite common:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Stateless</span> <span class="meta">@Path</span>(<span class="string">"/service"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>Soon, more and more uses for annotations emerged, leading to situations where one would have liked to repeat the same annotation. E.g.,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@PrimaryKeyJoinColumn</span>(name=<span class="string">"ID"</span>)</div><div class="line"><span class="meta">@PrimaryKeyJoinColumn</span>(name=<span class="string">"REGION"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>Since that wasn’t possible, the annotations were packed into a container annotation, like this:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@PrimaryKeyJoinColumns</span>(&#123;</div><div class="line">  <span class="meta">@PrimaryKeyJoinColumn</span>(name=<span class="string">"ID"</span>)</div><div class="line">  <span class="meta">@PrimaryKeyJoinColumn</span>(name=<span class="string">"REGION"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>This is no longer necessary in Java 8. If your framework provider has enabled repeated annotations, you can just use them. </p>
<p>For a framework implementor, the <code>AnnotatedElement</code> interface has a method that gets the annotation of type T, if present.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T extends Annotation&gt; <span class="function">T <span class="title">getAnnotation</span><span class="params">(Class&lt;T&gt; annotationClass)</span></span></div></pre></td></tr></table></figure></p>
<p>What should the method do if multiple annotations of the same type are present? To solve this problem, the inventor of a repeatable annotation must</p>
<ol>
<li>Annotate the annotation as <code>@Repeatable</code></li>
<li>Provide a container annotation </li>
</ol>
<p>E.g., for a simple unit testing framework, we might define a repeatable <code>@TestCase</code> annotation, to be used like this:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@TestCase</span>(params=<span class="string">"4"</span>, expected=<span class="string">"24"</span>)</div><div class="line"><span class="meta">@TestCase</span>(params=<span class="string">"0"</span>, expected=<span class="string">"1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>Here is how annotation can be defined:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repeatable</span>(TestCases.class)</div><div class="line"><span class="meta">@interface</span> TestCase &#123;</div><div class="line">  <span class="function">String <span class="title">params</span><span class="params">()</span></span>;</div><div class="line">  <span class="function">String <span class="title">expected</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@interface</span> TestCases &#123;</div><div class="line">  TestCase[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Whenever the user supplies two or more <code>@TestCase</code> annotations, they are automatically wrapped into a <code>@TestCases</code> annotation. </p>
<p>When annotation processing code calls <code>element.getAnnotation(TestCase.class)</code> on the element representing the <code>factorial</code> method, null is returned. This is becasue the element is actually annotated with the container annotation <code>TestCases</code>. </p>
<p>When implementing an annotation processor for your repeatable annotation, you will find it simpler to use the <code>getAnnotationsByType</code> method. The call <code>element.getAnnotationsByType(TestCase.class)</code> “looks through” any <code>TestCases</code> container and gives you an array of <code>TestCase</code> annotations. </p>
<h3 id="Type-Use-Annotations"><a href="#Type-Use-Annotations" class="headerlink" title="Type Use Annotations"></a>Type Use Annotations</h3><p>Prior to Java 8, an annotation was applied to a declaration. A declaration is a part of code the introduces a new name.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) List&lt;Person&gt; people = query.getResultList();</div></pre></td></tr></table></figure></p>
<p>In Java 8, you can annotate any type use. This can be useful in combination with tools that check for common programming errors. Suppose you annotated variables that you never want to be null as <code>@NonNull</code>. A tool can check that the following is correct:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="meta">@NonNull</span> List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">...</div><div class="line">names.add(<span class="string">"Fred"</span>); <span class="comment">// No possibility of a NullPointerException</span></div></pre></td></tr></table></figure></p>
<p>The tool should detect any statement that might cause <code>names</code> to be null.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">names = <span class="keyword">null</span>; <span class="comment">// Null checker flags this as an error</span></div><div class="line">names = readNames(); <span class="comment">// OK if readNames returns a @NonNull String</span></div></pre></td></tr></table></figure></p>
<p>The null checker in the Checker Framework assumes that any nonlocal variables are implicitly <code>@NonNull</code>, but that local variables might be null unless the code shows otherwise. If a method may return a null, it needs to be annotated as <code>@Nullable</code>. </p>
<p>How can one express that the list <em>elements</em> should be non-null?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> List&lt;<span class="meta">@NonNull</span> String&gt; names;</div></pre></td></tr></table></figure></p>
<p>It is this kind of annotation that was not possible before Java 8 but has now become legal. </p>
<p>Type use annotations can appear in the following places:</p>
<ul>
<li>With generic type arguments: <code>List&lt;@NonNull String&gt;</code>, <code>Comparator.&lt;@NonNull String&gt;reverseOrder()</code></li>
<li>In any position of an array: <code>@NonNull String[][] words</code>(words[i][j] is not null), <code>String @NonNull [][] words</code>(words is not null), <code>String[] @NonNull [] words</code>(words[i] is not null)</li>
<li>With superclasses and implemented interfaces: <code>class Image implements @Rectangular Shape</code></li>
<li>With constructor invocations: <code>new @Path String(&quot;/usr/bin&quot;)</code></li>
<li>With casts and <code>instanceOf</code> checks: <code>(@Path String) input</code>, <code>if (input instanceOf @Path String)</code>. (The annotations are only for use by external tools. They have no effect on the behavior of a cast or an <code>instanceOf</code> check.)</li>
<li>With exception specifications: <code>public Person read() throws @Localized IOException</code></li>
<li>With wildcards and type bounds: <code>List&lt;@ReadOnly ? extends Person&gt;</code>, <code>List&lt;? extends @ReadOnly&gt; Person</code></li>
<li>With method and constructor references: <code>@Immutable Person::getName</code></li>
</ul>
<p>There are a few type positions that cannot be annotated:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NonNull</span> String.class <span class="comment">// cannot annotate class literal</span></div><div class="line"><span class="keyword">import</span> java.lang.<span class="meta">@NonNull</span> String; <span class="comment">// cannot annotate import</span></div></pre></td></tr></table></figure></p>
<p>It is also impossible to annotate an annotation. </p>
<p>More for extended type checking can be found at Checker Framework tutorial. </p>
<h3 id="Method-Parameter-Reflection"><a href="#Method-Parameter-Reflection" class="headerlink" title="Method Parameter Reflection"></a>Method Parameter Reflection</h3><p>The names of parameters are now available through reflection. Consider a typical JAX-RS method:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Person <span class="title">getEmployee</span><span class="params">(@PathParam(<span class="string">"dept"</span>)</span> Long dept, @<span class="title">QueryParam</span><span class="params">(<span class="string">"id"</span>)</span> Long id)</span></div></pre></td></tr></table></figure></p>
<p>In almost all cases, the parameter names are the same as the annotation arguments, or they can be made to be the same. If the annotation processor could read the parameter names, then one could simply write<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Person <span class="title">getEmployee</span><span class="params">(@PathParam Long dept, @QueryParam Long id)</span></span></div></pre></td></tr></table></figure></p>
<p>This is possible in Java 8, with the new class <code>java.lang.relect.Parameter</code>. </p>
<p>Unfortuantely, for the necessary information to appear in the classfile, the source must be compiled as <code>javac -parameters SourceFile.java</code>. </p>
<h2 id="Miscellaneous-Minor-Changes"><a href="#Miscellaneous-Minor-Changes" class="headerlink" title="Miscellaneous Minor Changes"></a>Miscellaneous Minor Changes</h2><h3 id="Null-Checks"><a href="#Null-Checks" class="headerlink" title="Null Checks"></a>Null Checks</h3><p>The <code>Objects</code> class has static predicate methods <code>isNull</code> and <code>nonNull</code> that can be useful for streams.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// checks whether a stream contains a null</span></div><div class="line">stream.anyMatch(Objects::isNull);</div><div class="line"></div><div class="line"><span class="comment">// filter null</span></div><div class="line">stream.filter(Objects::nonNull);</div></pre></td></tr></table></figure></p>
<h3 id="Lazy-Messages"><a href="#Lazy-Messages" class="headerlink" title="Lazy Messages"></a>Lazy Messages</h3><p>The <code>log</code>, <code>logp</code>, <code>severe</code>, <code>warning</code>, <code>info</code>, <code>config</code>, <code>fine</code>, <code>finer</code>, and <code>finest</code> methods of <code>java.util.Logger</code> class now support lazily constructed messages.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.finest(<span class="string">"x: "</span> + x + <span class="string">", y: "</span> + y);</div></pre></td></tr></table></figure></p>
<p>The message string is formatted even when the logging level is such that it would never be used. Instead, use<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.finest(() -&gt; <span class="string">"x: "</span> + x + <span class="string">", y: "</span> + y);</div></pre></td></tr></table></figure></p>
<p>Now the lambda expression is only evaluated at the <code>FINEST</code> logging level, when the cost of the lambda invocation is presumably the least of one’s problems. </p>
<p>The <code>requireNonNull</code> of the <code>Objects</code> class also has a version that computes the message string lazily.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.directions = Objects.requireNonNull(directions, () -&gt; <span class="string">"directions for "</span> + <span class="keyword">this</span>.goal + <span class="string">" must not be null"</span>);</div></pre></td></tr></table></figure></p>
<p>In the common case that <code>directions</code> is not null, <code>this.directions</code> is simply set to <code>directions</code>. If <code>directions</code> is null, the lambda is invoked, and a <code>NullPointerException</code> is thrown whose message is the returned string. </p>
<h3 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h3><p>Java 7 introduced named capturing groups.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(?&lt;city&gt;[\p&#123;L&#125; ]+),\s*(?&lt;state&gt;[A-Z]&#123;<span class="number">2</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>In Java 8, you can use the names in the <code>start</code>, <code>end</code>, and <code>group</code> methods of <code>Matcher</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Matcher matcher = pattern.matcher(input);</div><div class="line"><span class="keyword">if</span> (matcher.matches()) &#123;</div><div class="line">  String city = matcher.group(<span class="string">"city"</span>);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The <code>Pattern</code> class has a <code>splitAsStream</code> method that splits a <code>CharSequence</code> along a regular expression.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String contents = <span class="keyword">new</span> String(Files.readAllBytes(path), StandardCharsets.UTF_8);</div><div class="line">Stream&lt;String&gt; words = Pattern.compile(<span class="string">"[\\P&#123;L&#125;]+"</span>).splitAsStream(contents);</div></pre></td></tr></table></figure></p>
<p>The method <code>asPredicate</code> can be used to filter strings that match a regular expression:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; acronyms = words.filter(Pattern.compile(<span class="string">"[A-Z]&#123;2,&#125;"</span>).asPredicate());</div></pre></td></tr></table></figure></p>
<h3 id="Locales"><a href="#Locales" class="headerlink" title="Locales"></a>Locales</h3><p>A locale specifies everything you need to know to present information to a user with local preferences concerning language, date formats, and so on. </p>
<p>A locale is composed of up to five components:</p>
<ol>
<li>A language, specified by two or three lowercase letters</li>
<li>A script, specified by four letters with an intial uppercase</li>
<li>A country, specified by two uppercase letters or three digits</li>
<li>Optionally, a variant </li>
<li>Optionally, an extension. Extensions describe local preferences for calendars, numbers, and so on</li>
</ol>
<p>Since Java 7 you can simply call <code>Locale.forLanguageTag(&quot;en-US&quot;)</code>. Java 8 adds methods for finding locales that match user needs. </p>
<p>A <em>language range</em> is a string that denotes the locale characteristics that a user desires, with * for wildcards. One can optionally specify a weight between 0 and 1 when constructing a <code>Locale.LanguageRange</code>. </p>
<p>Given a list of weighted language ranges and a collection of locales, the <code>filter</code> method produces a list of matching locales, in descending order of match quality.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// A list containing the Locale.LanguageRange objects for the given strings</span></div><div class="line">List&lt;Locale.LanguageRange&gt; ranges = Stream.of(<span class="string">"de"</span>, <span class="string">"*-CH"</span>)</div><div class="line">  .map(Locale.LanguageRange::<span class="keyword">new</span>)</div><div class="line">  .collect(Collectors.toList());</div><div class="line">  </div><div class="line">List&lt;Locale&gt; matches = Locale.filter(ranges, Arrays.asList(Locale.getAvailableLocales()));</div><div class="line"><span class="comment">// matching de, de-CH, de-AT, de-LU, de-DE, de-GR, fr-CH, it_CH</span></div></pre></td></tr></table></figure></p>
<p><code>lookup</code>: finds the best locale.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Locale bestMatch = Locale.lookup(ranges, locales);</div><div class="line"><span class="comment">// matching de</span></div></pre></td></tr></table></figure></p>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p>In Java 8, JDBC has been updated to version 4.2.</p>
<p>The <code>Date</code>, <code>Time</code>, and <code>Timestamp</code> classes in the <code>java.sql</code> package have methods to convert from and to their <code>java.time</code> analogs <code>LocalDate</code>, <code>LocalTime</code>, and <code>LocalDateTime</code>. </p>
<p>The <code>Statement</code> class has a method <code>executeLargeUpdate</code> for executing an update whose row count exceeds Integer.MAX_VALUE. </p>
<p>JDBC 4.1 specified a generic method <code>getObject(column, type)</code> for <code>Statement</code> and <code>ResultSet</code>, where <code>type</code> is a <code>Class</code> instance. E.g., <code>URL url = result.getObject(&quot;link&quot;, URL.class)</code> retrieves a <code>DATALINK</code> as a <code>URL</code>. Now the corresponding <code>setObject</code> method is provided as well. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chapter-8-Miscellaneous-Goodies&quot;&gt;&lt;a href=&quot;#Chapter-8-Miscellaneous-Goodies&quot; class=&quot;headerlink&quot; title=&quot;Chapter 8 Miscellaneous Goodie
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 12</title>
    <link href="http://blog.kiyanpro.com/2016/03/31/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-12/"/>
    <id>http://blog.kiyanpro.com/2016/03/31/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-12/</id>
    <published>2016-04-01T01:26:27.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-8-Miscellaneous-Goodies"><a href="#Chapter-8-Miscellaneous-Goodies" class="headerlink" title="Chapter 8 Miscellaneous Goodies"></a>Chapter 8 Miscellaneous Goodies</h1><p>Key points:</p>
<ul>
<li>Joining strings with a delimiter is finally easy: <code>String.join(&quot;,&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code> instead of <code>a + &quot;, &quot; + b + &quot;, &quot; + c&quot;</code>.</li>
<li>Integer types now support unsigned arithmetic.</li>
<li>The <code>Math</code> class has methods to detect integer overflow.</li>
<li>Use <code>Math.floorMod(x, n)</code> instead of <code>x % n</code> if x might be negative.</li>
<li>There are a few mutators in <code>Collection(removeIf)</code> and <code>List(replaceAll, sort)</code>.</li>
<li><code>Files.lines</code> lazily reads a stream of lines.</li>
<li><code>Files.list</code> lazily lists the entries of a directory, and <code>Files.walk</code> traverses them recursively. </li>
<li>There is finally official support for Base64 encoding. </li>
<li>Annotations can now be repeated and applied to type uses.</li>
<li>Convenient support for null parameter checks can be found in the <code>Object</code> class. </li>
</ul>
<h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><p>A common task is to combine several strings, separating them with a delimiter such as “, “ or “/“. This has now been added to Java 8. The strings can come from an array or an <code>Iterable&lt;? extends CharSequence&gt;</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String joined = String.join(<span class="string">"/"</span>, <span class="string">"usr"</span>, <span class="string">"local"</span>, <span class="string">"bin"</span>); <span class="comment">// "usr/local/bin"</span></div><div class="line"></div><div class="line">String ids = String.join(<span class="string">", "</span>, ZoneId.getAvailableZoneIds());</div></pre></td></tr></table></figure></p>
<p>Think of <code>join</code> as the opposite of the <code>String.split</code> instance method. </p>
<h2 id="Number-Classes"><a href="#Number-Classes" class="headerlink" title="Number Classes"></a>Number Classes</h2><p>Since Java 5, each of seven numeric primitive type wrappers(i.e, not <code>Boolean</code>) had a static <code>SIZE</code> field that gives the size of the type in bits.</p>
<p>There is now <code>BYTES</code> field that reports the size in bytes. </p>
<p>All eight primitive type wrappers now have static <code>hashCode</code> methods that return the same hash code as the instance methods, but without the need for boxing. </p>
<p>The five types <code>Short</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, and <code>Double</code> now have static methods <code>sum</code>, <code>max</code> and <code>min</code>, which can be useful as reduction functions in stream operations. </p>
<p>The <code>Boolean</code> class has static <code>logicalAnd</code>, <code>logicalOr</code>, and <code>logicalXor</code> for the same purpose. </p>
<p>Integer types now support unsigned arithmetic. E.g., instead of having a <code>Byte</code> represent the range from -128 to 127, you can call the static method <code>Byte.toUnsignedInt(b)</code> and get a value between 0 and 255. The <code>Byte</code> and <code>Short</code> classes have methods <code>toUnsignedInt</code>, and <code>Byte</code>, <code>Short</code> and <code>Integer</code> have methods <code>toUnsignedLong</code>. </p>
<p>The <code>Integer</code> and <code>Long</code> classes have methods <code>compareUnsigned</code>, <code>divideUnsigned</code>, and <code>remainderUnsigned</code> to work with unsigned values. Integer multiplication would overflow with unsigned integers larger than <code>Integer.MAX_VALUE</code>, so you should call <code>toUnsignedLong</code> and multiply them as long values. </p>
<p>The <code>Float</code> and <code>Double</code> classes have static methods <code>isFinite</code>. The call <code>Double.isFinite(x)</code> returns true if x is not infinity, negative infinity, or a NaN. In the past, you had to call the instance methods <code>isInfinite</code> and <code>isNaN</code> to get the same result. </p>
<p>The <code>BigInteger</code> class has instance methods <code>(long|int|short|byte)ValueExact</code> that return the values as a long, int, short, or byte, throwing an <code>ArithmeticException</code> if the value is not within the target range. </p>
<h2 id="New-Mathematical-Functions"><a href="#New-Mathematical-Functions" class="headerlink" title="New Mathematical Functions"></a>New Mathematical Functions</h2><p>The <code>Math</code> class provides several methods for “exact” arithmetic that throw an exception when a result overflows. E.g., 100000 * 100000 quietly gives the wrong result 1410065408, whereas <code>multiplyExact(100000, 100000)</code> throws an exception. The provided methods are <code>(add|subtract|multiply|increment|decrement|negate)Exact</code> with <code>int</code> and <code>long</code> parameters. The <code>toIntExact</code> method converts a <code>long</code> to the equivalent <code>int</code>. </p>
<p>The <code>floorMod</code> and <code>floorDiv</code> methods aim to solve a long-standing problem with integer remainders: n % 2 is -1 when n is negative and odd. <code>floorMod(position + adjustment, 12)</code> always yields a value between 0 and 11. </p>
<p>Unfortunately, <code>floorMod</code> gives negative results for negative divisors, but that situation doesn’t often occur in practice. </p>
<p>The <code>nextDown</code> method, defined for both <code>double</code> and <code>float</code> parameters, gives the next smaller floating-point number for a given number. E.g., if you promise to produce a number &lt; b, but you happen to have computed exactly b, then you can return <code>Math.nextDown(b)</code>.(The corresponding <code>Math.nextUp</code> method exists since Java 6.) </p>
<p>All methods described in this section also exist in the <code>StrictMath</code> class. </p>
<h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><h3 id="Methods-Added-to-Collection-Classes"><a href="#Methods-Added-to-Collection-Classes" class="headerlink" title="Methods Added to Collection Classes"></a>Methods Added to Collection Classes</h3><p><strong>Methods Added to Collections Classes and Interface in Java 8, other than the stream, parallelStream, and spliterator</strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Class/Interface</th>
<th style="text-align:left">New Methods</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Iterable</td>
<td style="text-align:left">forEach</td>
</tr>
<tr>
<td style="text-align:left">Collection</td>
<td style="text-align:left">removeIf</td>
</tr>
<tr>
<td style="text-align:left">List</td>
<td style="text-align:left">replaceAll, sort</td>
</tr>
<tr>
<td style="text-align:left">Map</td>
<td style="text-align:left">forEach, replace, replaceAll, remove(key, value)(removes only if key mapped to value),<br>putIfAbsent, compute, computeIf(Absent &#124; Present), merge</td>
</tr>
<tr>
<td style="text-align:left">Iterator</td>
<td style="text-align:left">forEachRemaining</td>
</tr>
<tr>
<td style="text-align:left">BitSet</td>
<td style="text-align:left">stream</td>
</tr>
</tbody>
</table>
<p><code>removeIf</code>: can be thought of as the opposite of <code>filter</code>, removing rather than producing all matches and carrying out the removal in place. The <code>distinct</code> method would be costly to provide on arbitrary collections. </p>
<p>The <code>List</code> interface has a <code>replaceAll</code> method, which is an in-place equivalent of <code>map</code>, and a <code>sort</code> method that is obviously useful. </p>
<p>The <code>Iterator</code> interface has a <code>forEachRemaining</code> method that exhausts the iterator by feeding the remaining iterator elements to a function. </p>
<p>The <code>BitSet</code> class has a method that yields all members of the set as a stream of int values. </p>
<h3 id="Comparators"><a href="#Comparators" class="headerlink" title="Comparators"></a>Comparators</h3><p>The static <code>comparing</code> method takes a “key extractor” function that maps a type T to a comparable type (such as String). The function is applied to the objects to be compared, and the comparison is then made on the returned keys.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sort an array of Person by name</span></div><div class="line">Arrays.sort(people, Comparator.comparing(Person::getName));</div></pre></td></tr></table></figure></p>
<p>You can chain comparators with <code>thenComparing</code> method for breaking ties<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(people, </div><div class="line">  Comparator.comparing(Person::getLastName))</div><div class="line">    .thenComparing(Person::getFirstName));</div></pre></td></tr></table></figure></p>
<p>If two people have the same last name, then the second comparator is used. </p>
<p>You can specify comparator to be used for the keys that the <code>comparing</code> and <code>thenComparing</code> methods extract.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(people, Comparator.comparing(Person::getName, (s, t) -&gt; Integer.compare(s.length(), t.length())));</div></pre></td></tr></table></figure></p>
<p>Both the <code>comparing</code> and <code>thenComparing</code> methods have variants that avoid boxing of int, long, or double values.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(people, Comparator.comparingInt(p -&gt; p.getName().length()));</div></pre></td></tr></table></figure></p>
<p>If your key function can return null, use <code>nullsFirst</code> or <code>nullsLast</code> adapters. These static methods take an existing comparator and modify it so that it doesn’t throw an exception when encountering null values but ranks them as smaller or larger than regular values. Suppose <code>getMiddleName</code> returns a null when a person has no middle name. Then you can use <code>Comparator.comparing(Person::getMiddleName(), Comparator.nullsFirst(...))</code>. </p>
<p>The <code>naturalOrder</code> method makes a comparator for any class implementing <code>Comparable</code>. A <code>Comparator.&lt;String&gt;natrualOrder()</code> is what we need.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">import</span> java.util.Comparator.*;</div><div class="line"></div><div class="line">Arrays.sort(people, comparing(Person::getMiddleName, nullsFirst(naturalOrder())));</div></pre></td></tr></table></figure></p>
<p>The static <code>reverseOrder</code> method gives the reverse of the natural order. To reverse any comparator, use the <code>reversed</code> instance method. <code>anturalOrder().reversed()</code> is the same as <code>reverseOrder()</code>. </p>
<h3 id="The-Collections-Class"><a href="#The-Collections-Class" class="headerlink" title="The Collections Class"></a>The Collections Class</h3><p>Java 6 introduces <code>NavigableSet</code> and <code>NavigableMap</code> interfaces that take advantage of the ordering of the elements or keys, providing efficient methods to locate, for any given value v, the smallest element &gt;= or &gt; v, or the largest element &lt;= or &lt; v.</p>
<p>The <code>Collections</code> class supports these interfaces as it does other collections, with methods <code>(unmodifiable|synchronized|check|empty)Navigable(Set|Map)</code>. </p>
<p>A <code>checkedQueue</code> wrapper has also been added. As as reminder, the <code>checked</code> wrappers have a <code>Class</code> parameter and throw a <code>ClassCastException</code> when you insert an element of the wrong type. These classes are intended as debugging aids. Suppose you declare a <code>Queue&lt;Path&gt;</code>, and somewhere in your code there is a <code>ClassCastException</code> trying to cast a String to a Path. If you temporarily replace the queue with a <code>CheckedQueue(new LinkedList&lt;Path&gt;, Path.class)</code>, then every insertion is checked at runtime, and you can locate the faulty insertion code. </p>
<p>There are <code>emptySorted(Set|Map)</code> methods that give lightweight instances of sorted collections, analogous to the <code>empty(Set|Map)</code> methods. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chapter-8-Miscellaneous-Goodies&quot;&gt;&lt;a href=&quot;#Chapter-8-Miscellaneous-Goodies&quot; class=&quot;headerlink&quot; title=&quot;Chapter 8 Miscellaneous Goodie
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 11</title>
    <link href="http://blog.kiyanpro.com/2016/03/30/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-11/"/>
    <id>http://blog.kiyanpro.com/2016/03/30/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-11/</id>
    <published>2016-03-31T00:56:21.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-6-Concurrency-Enhancements"><a href="#Chapter-6-Concurrency-Enhancements" class="headerlink" title="Chapter 6 Concurrency Enhancements"></a>Chapter 6 Concurrency Enhancements</h1><h2 id="Parallel-Array-Operations"><a href="#Parallel-Array-Operations" class="headerlink" title="Parallel Array Operations"></a>Parallel Array Operations</h2><p><code>Arrays</code> class now has a number of parallelized operations. </p>
<p><code>Arrays.parallelSort</code>: sort an array of primitive values or objects.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String contents = <span class="keyword">new</span> String(Files.readAllBytes(Paths.get(<span class="string">"alice.txt"</span>)), StandardCharsets.UTF_8);</div><div class="line">String[] words = contents.split(<span class="string">"[\\P&#123;L&#125;]+"</span>); <span class="comment">// Split along nonletters</span></div><div class="line">Arrays.parallelSort(words);</div></pre></td></tr></table></figure></p>
<p>You can supply a <code>Comparator</code>. </p>
<p>You can supply the bounds of a range.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.parallelSort(values, values.length / <span class="number">2</span>, values); <span class="comment">// Sort the upper half</span></div></pre></td></tr></table></figure></p>
<p><code>parallelSetAll</code>: fills an array with values that are computed from a function. The function receives the element index. There are versions for all primitive type arrays and for object arrays.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.parallelSetAll(values, i -&gt; i % <span class="number">10</span>);</div></pre></td></tr></table></figure></p>
<p><code>parallelPrefix</code>: replaces each array element with the accumulation of the prefix for a given associative operation.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// [1, 2, 3, 4, ...] and x</span></div><div class="line">Arrays.parallelPrefix(values, (x, y) -&gt; x * y);</div><div class="line"><span class="comment">// [1, 1 x 2, 1 x 2 x 3, 1 x 2 x 3 x 4, ...]</span></div></pre></td></tr></table></figure></p>
<p>This can be parallelized in this way: join neighboring elements first, then update the indicated elements by multiplying them with elements that are one or two positions below. </p>
<h2 id="Completable-Futures"><a href="#Completable-Futures" class="headerlink" title="Completable Futures"></a>Completable Futures</h2><p>The <code>java.util.concurrent</code> library provides a <code>Future&lt;T&gt;</code> interface to denote a value of type <code>T</code> that will be available at some point in the future. </p>
<p><em>Completable futures</em> make it possible to compose asynchronous operations. </p>
<h3 id="Futures"><a href="#Futures" class="headerlink" title="Futures"></a>Futures</h3><p>Consider a method that reads a web page in a separate thread, which is going to take a while. When you call it, the method returns right away, and you have a <code>Future&lt;String&gt;</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">readPage</span><span class="params">(URL url)</span></span></div><div class="line"></div><div class="line">Future&lt;String&gt; contents = readPage(url);</div></pre></td></tr></table></figure></p>
<p>Suppose we want to extract all URLs from the page in order to build a web crawler. We have a class <code>Parser</code> with a method<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;URL&gt; <span class="title">getLinks</span><span class="params">(String page)</span></span></div></pre></td></tr></table></figure></p>
<p>How can we apply it to the future object? First, call the <code>get</code> method on the future to get its value when it becomes available. Then, process the result:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String page = contents.get(); <span class="comment">// blocking</span></div><div class="line">List&lt;URL&gt; links = Parser.getLinks(page);</div></pre></td></tr></table></figure></p>
<p>No better off than with a method <code>public String readPage(URL url)</code> that blocks until the result is available. </p>
<h3 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture<t></t></h3><p>Provides the feature to set “when the result becomes available, here is how to process it”. A <code>CompletableFuture</code> has a method <code>thenApply</code> to which you can pass the post-processing function. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;String&gt; contents = readPage(url);</div><div class="line">CompletableFuture&lt;List&lt;URL&gt;&gt; links = contents.thenApply(Parser::getLinks);</div></pre></td></tr></table></figure>
<p>The <code>thenApply</code> method doesn’t block either. It returns another future. When the first future has completed. its result is fed to the <code>getLinks</code> method, and the return value of that method becomes the final result. </p>
<p>This <em>composability</em> is the key aspect of the <code>CompletableFuture</code> class. Composing future actions solves a problem in programming asynchronous applications. </p>
<h3 id="The-Composition-Pipeline"><a href="#The-Composition-Pipeline" class="headerlink" title="The Composition Pipeline"></a>The Composition Pipeline</h3><p>Pipeline of futures starts out by generating a <code>CompletableFuture</code>, usually with the static method <code>supplyAsync</code>. That method requires a <code>Supplier&lt;T&gt;</code>, that is, a function with no parameters yielding a <code>T</code>. The function is called on a separate thread.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;String&gt; contents = CompletableFuture.supplyAsync(() -&gt; blockingReadPage(url));</div></pre></td></tr></table></figure></p>
<p><code>runAsync</code>: takes a <code>Runnable</code>, yielding a <code>CompletableFuture&lt;Void&gt;</code>. Useful if you simply want to schedule one action after another, without passing data between them. </p>
<p>All methods ending in <code>Async</code> have two variants. One runs the provided action on the common <code>ForkJoinPool</code>. The other has a parameter of type <code>java.util.concurrent.Executor</code>, and it uses the given executor to run the action. </p>
<p>Next, you can call <code>thenApply</code> or <code>thenApplyAsync</code> to run another action, either in the same thread or another. With either method, you supply a function and you get a <code>CompletableFuture&lt;U&gt;</code>, where <code>U</code> is the return type of the function.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;List&lt;URL&gt;&gt; links = CompletableFuture</div><div class="line">  .supplyAsync(() -&gt; blockingReadPage(url))</div><div class="line">  .thenApply(Parser::getLinks);</div></pre></td></tr></table></figure></p>
<p>You can have additional processing steps. Eventually, you will be done.<br><code>thenAccept</code>: takes a <code>Consumer</code>, a function with return type <code>void</code>. Ideally, you would never call <code>get</code> on a future. The last step in the pipeline simply deposits the result where it belongs.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;Void&gt; links = CompletableFuture.supplyAsync(() -&gt; blockingReadPage(url)).thenApply(Parser::getLinks)</div><div class="line">  .thenAccept(System.out::println);</div></pre></td></tr></table></figure></p>
<p>You don’t explicitly start the computation. The static <code>supplyAsync</code> method starts it automatically, and the other methods cause it  to be continued. </p>
<h3 id="Composing-Asynchronous-Operations"><a href="#Composing-Asynchronous-Operations" class="headerlink" title="Composing Asynchronous Operations"></a>Composing Asynchronous Operations</h3><p><strong>Adding an Action to a CompletableFuture<t> Object</t></strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Method</th>
<th style="text-align:left">Parameter</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">thenApply</td>
<td style="text-align:left">T -&gt; U</td>
<td style="text-align:left">Apply a function to the result</td>
</tr>
<tr>
<td style="text-align:left">thenCompose</td>
<td style="text-align:left">T -&gt; CompletableFuture<u></u></td>
<td style="text-align:left">Invoke the function on the result and execute the returned future</td>
</tr>
<tr>
<td style="text-align:left">handle</td>
<td style="text-align:left">(T, Throwable) -&gt; U</td>
<td style="text-align:left">Process the result or error</td>
</tr>
<tr>
<td style="text-align:left">thenAccept</td>
<td style="text-align:left">T -&gt; void</td>
<td style="text-align:left">Like thenApply, but with void result</td>
</tr>
<tr>
<td style="text-align:left">whenComplete</td>
<td style="text-align:left">(T, Throwable) -&gt; void</td>
<td style="text-align:left">Like handle, but with void result</td>
</tr>
<tr>
<td style="text-align:left">thenRun</td>
<td style="text-align:left">Runnable</td>
<td style="text-align:left">Execute the Runnable with void result</td>
</tr>
</tbody>
</table>
<p>For each method shown, there are also two <code>Async</code> variants. </p>
<p>T -&gt; U is Function&lt;? super T, U&gt;</p>
<p>The calls <code>CompletableFuture&lt;U&gt; future.thenApply(f)</code> and <code>CompletableFuture&lt;U&gt; future.thenApplyAsync(f)</code> return a future that applies f to the result of future when it is available. The second call runs f in another thread. </p>
<p><code>thenCompose</code>: takes a function <code>T -&gt; CompletableFuture&lt;U&gt;</code>. </p>
<p>Here we have two functions: T -&gt; CompletableFuture<u> and U -&gt; CompletableFuture<v>. Clearly, they compose to a function T -&gt; CompletableFuture<v> by calling the second function when the first one has completed. That is exactly what <code>thenCompose</code> does.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;String&gt; <span class="title">readPage</span><span class="params">(URL url)</span></span></div><div class="line"></div><div class="line"><span class="keyword">public</span> CompletableFuture&lt;URL&gt; <span class="title">getURLInput</span><span class="params">(String prompt)</span></div></pre></td></tr></table></figure></v></v></u></p>
<p><code>handle</code>: handles an exception thrown in a CompletableFuture. The supplied function is called with the result (or null if none) and the exception (or null if none), and it gets to make sense of the situation. </p>
<p><strong>Combining Multiple Composition Objects</strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Method</th>
<th style="text-align:left">Parameters</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">thenCombine</td>
<td style="text-align:left">CompletableFuture<u>, (T, U) -&gt; V</u></td>
<td style="text-align:left">Execute both and combine the results with the given function.</td>
</tr>
<tr>
<td style="text-align:left">theAcceptBoth</td>
<td style="text-align:left">CompletableFuture<u>, (T, U) -&gt; void</u></td>
<td style="text-align:left">Like thenCombine, but with void result.</td>
</tr>
<tr>
<td style="text-align:left">runAfterBoth</td>
<td style="text-align:left">CompletableFuture&lt;?&gt;, Runnable</td>
<td style="text-align:left">Execute the runnable after both complete.</td>
</tr>
<tr>
<td style="text-align:left">applyToEither</td>
<td style="text-align:left">CompletableFuture<t>, T -&gt; V</t></td>
<td style="text-align:left">When a result is available from one or the other, pass it to the given function</td>
</tr>
<tr>
<td style="text-align:left">acceptEither</td>
<td style="text-align:left">CompletableFuture<t>, T -&gt; void</t></td>
<td style="text-align:left">Like applyToEither, but with void result.</td>
</tr>
<tr>
<td style="text-align:left">runAfterEither</td>
<td style="text-align:left">CompletableFuture&lt;?&gt;, Runnable</td>
<td style="text-align:left">Execute the runnable after one or the other completes.</td>
</tr>
<tr>
<td style="text-align:left">static allOf</td>
<td style="text-align:left">CompletableFuture&lt;?&gt;…</td>
<td style="text-align:left">Complete with void result after all given futures complete.</td>
</tr>
<tr>
<td style="text-align:left">static anyOf</td>
<td style="text-align:left">CompletableFuture&lt;?&gt;…</td>
<td style="text-align:left">Complete with void result after any of the given futures completes.</td>
</tr>
</tbody>
</table>
<p>The first three methods run a <code>CompletableFuture&lt;T&gt;</code> and a <code>CompletableFuture&lt;U&gt;</code> action in parallel and combine the results. </p>
<p>The next three methods run two <code>CompletableFuture&lt;T&gt;</code> actions in parallel. As soon as one of them finishes, its result is passed on, and the other result is ignored. </p>
<p>The static <code>allOf</code> and <code>anyOf</code> methods take a variable number of completable futures and yield a <code>CompletableFuture&lt;Void&gt;</code> that completes when all of them, or any one of them, completes. No results are propagated. </p>
<p>Technically speaking, the methods accept parameters of <code>CompletionStage</code>, not <code>CompletableFuture</code>. That is an interface type with almost forty abstract methods, currently implemented only by <code>CompletableFuture</code>. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chapter-6-Concurrency-Enhancements&quot;&gt;&lt;a href=&quot;#Chapter-6-Concurrency-Enhancements&quot; class=&quot;headerlink&quot; title=&quot;Chapter 6 Concurrency En
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 10</title>
    <link href="http://blog.kiyanpro.com/2016/03/29/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-10/"/>
    <id>http://blog.kiyanpro.com/2016/03/29/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-10/</id>
    <published>2016-03-30T01:21:42.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-6-Concurrency-Enhancements"><a href="#Chapter-6-Concurrency-Enhancements" class="headerlink" title="Chapter 6 Concurrency Enhancements"></a>Chapter 6 Concurrency Enhancements</h1><h2 id="ConcurentHashMap-Improvements"><a href="#ConcurentHashMap-Improvements" class="headerlink" title="ConcurentHashMap Improvements"></a>ConcurentHashMap Improvements</h2><p><code>mappingCount</code>: returns the size as a <code>long</code> in case it’s too large.</p>
<p>An attacker can slow down a program by crafting a large number of strings that hash to the same value. As of Java 8, the concurrent hash map organizes the buckets as trees, not lists, when the key type implements <code>Comparable</code>, guaranteeing O(log(n)) performance. </p>
<h3 id="Updating-Values"><a href="#Updating-Values" class="headerlink" title="Updating Values"></a>Updating Values</h3><p>The following is not threadsafe<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Long oldValue = map.get(word);</div><div class="line">Long newValue = oldValue == <span class="keyword">null</span> ? <span class="number">1</span> : oldValue + <span class="number">1</span>;</div><div class="line">map.put(word, newValue); <span class="comment">// not atomic, another thread can be updating at the same time</span></div></pre></td></tr></table></figure></p>
<p><code>replace</code>: replacing a known old value with a new one.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  oldValue = map.get(word);</div><div class="line">  newValue = oldValue == <span class="keyword">null</span> ? <span class="number">1</span> : oldValue + <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">while</span> (!map.replace(word, oldValue, newValue));</div></pre></td></tr></table></figure></p>
<p>You can also use a <code>ConcurrentHashMap&lt;String, AtomicLong&gt;</code> or, with Java 8, a <code>ConcurrentHashMap&lt;String, LongAdder&gt;</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">map.putIfAbsent(word, <span class="keyword">new</span> LongAdder()); <span class="comment">// ensures that a LongAdder is there</span></div><div class="line">map.get(word).increment();</div></pre></td></tr></table></figure></p>
<p><code>compute</code>: called with a key and a function to compute the new value. That function receives the key and the associated value, or null if there is none, and it computes the new value.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.compute(word, (k, v) -&gt; v == <span class="keyword">null</span> ? <span class="number">1</span> : v + <span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>You cannot have null values in a <code>ConcurrentHashMap</code>. There are many methods that use a null value as an indication that a given key is not present in the map. </p>
<p><code>computeIfPresent</code>: only computes a new value when there is already an old one.<br><code>computeIfAbsent</code>: only computes a new value when there isn’t yet an old one. </p>
<p>A map of <code>LongAdder</code> counters can be updated with<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// LongAdder constructor is only called when a new counter is actually needed</span></div><div class="line">map.computeIfAbsent(word, k -&gt; <span class="keyword">new</span> LongAdder()).increment();</div></pre></td></tr></table></figure></p>
<p><code>merge</code>: can do something special when a key is added for the first time. It has a particular parameter for the initial value that is used when the key is not yet present. Otherwise, the function that you supplied is called, combining the existing value and the initial value. (Unlike <code>compute</code>, the function does not process the key.)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">map.merge(word, <span class="number">1L</span>, (existingValue, newValue) -&gt; existingValue + newValue);</div><div class="line"><span class="comment">// more simply</span></div><div class="line">map.merge(word, <span class="number">1L</span>, Long::sum);</div></pre></td></tr></table></figure></p>
<p>If the function that is passed to <code>compute</code> or <code>merge</code> returns null, the existing entry is removed from the map. </p>
<p>The function should not do a lot of work, otherwise other updates to the map may be blocked. And it should also not update other parts of the map. </p>
<h3 id="Bulk-Operations"><a href="#Bulk-Operations" class="headerlink" title="Bulk Operations"></a>Bulk Operations</h3><p>The bulk operations travers the map and operate on the elements they find as they go along. No effort is made to freeze a snapshot of the map in time. Unless you happen to know that the map is not being modified while a bulk operation runs, you should treat its result as an approximation of the map’s state. </p>
<p>3 kinds of operations:</p>
<ul>
<li><code>search</code>:applies a function to each key and/or value, until the function yields a non-null result. </li>
<li><code>reduce</code>: combines all keys and/or values, using a provided accumulation function. </li>
<li><code>forEach</code>: applies a function to all keys and/or values. </li>
</ul>
<p>Each operation has 4 versions:</p>
<ul>
<li><code>searchKeys</code> / <code>reduceKeys</code> / <code>forEachKey</code>: operates on keys</li>
<li><code>searchValues</code> / <code>reduceValues</code> / <code>forEachValue</code>: operates on values</li>
<li><code>search</code> / <code>reduce</code> / <code>forEach</code>: operates on keys and values</li>
<li><code>searchEntries</code> / <code>reduceEntries</code> / <code>forEachEntry</code>: operates on <code>Map.Entry</code> objects</li>
</ul>
<p>You need to specify a <em>parallelism threshold</em> with each of the operations. If the map contains more elements than the threshold, the bulk operation is parallelized. If you want to run single thread, use a threshold of <code>Long.MAX_VALUE</code>. If you want the max number of threads, use a threshold of 1. </p>
<p>Search<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">U <span class="title">searchKeys</span><span class="params">(<span class="keyword">long</span> threshold, Function&lt;? <span class="keyword">super</span> K, ? extends U&gt; f)</span></span></div><div class="line">U <span class="title">searchValues</span><span class="params">(<span class="keyword">long</span> threshold, Function&lt;? <span class="keyword">super</span> V, ? extends U&gt; f)</span></div><div class="line">U <span class="title">search</span><span class="params">(<span class="keyword">long</span> threshold, BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends U&gt; f)</span></div><div class="line">U <span class="title">searchEntries</span><span class="params">(<span class="keyword">long</span> threshold, Function&lt;Map.Entry&lt; K, V&gt;, ? extends U&gt; f)</span></div></pre></td></tr></table></figure></p>
<p>Find the first word that occurs more than 1000 times<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String result = map.search(threshold, (k, v) -&gt; v &gt; <span class="number">1000</span> ? k : <span class="keyword">null</span>);</div></pre></td></tr></table></figure></p>
<p>The result is set to the first match, or to null if the search function returns null for all inputs. </p>
<p>2 variants of <code>forEach</code>: the first one simply applies a <code>consumer</code> function for each map entry:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.forEach(threshold, (k, v) -&gt; System.out.println(k + <span class="string">"-&gt;"</span> + v));</div></pre></td></tr></table></figure></p>
<p>The second takes an additional <code>transformer</code> function, which is applied first, and its result is passed to the consumer:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">map.forEach(threshold, </div><div class="line">  (k, v) -&gt; k + <span class="string">"-&gt;"</span> + v, <span class="comment">// Transformer</span></div><div class="line">  System.out::println); <span class="comment">// Consumer</span></div></pre></td></tr></table></figure></p>
<p>The transformer can be used as a filter. Whenever the transformer returns null, the value is silently skipped.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// only print large values</span></div><div class="line">map.forEach(threshold, </div><div class="line">  (k, v) -&gt; v &gt; <span class="number">1000</span> ? k + <span class="string">"-&gt;"</span> + v : <span class="keyword">null</span>, <span class="comment">// Filter and transformer</span></div><div class="line">  System.out::println); <span class="comment">// The nulls are not passed to the consumer</span></div></pre></td></tr></table></figure></p>
<p><code>reduce</code>: combines inputs with an accumulation function<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sum of all values</span></div><div class="line">Long sum = map.reduceValues(threshold, Long::sum);</div></pre></td></tr></table></figure></p>
<p>You can also supply a transformer function.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Integer maxLength = map.reduceKeys(threshold, </div><div class="line">  String::length, <span class="comment">// Transformer</span></div><div class="line">  Integer::max); <span class="comment">// Accumulator</span></div></pre></td></tr></table></figure></p>
<p>The transformer can also be a filter.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Long count = map.reduceValues(threshold, </div><div class="line">  v -&gt; v &gt; <span class="number">1000</span> ? <span class="number">1L</span> : <span class="keyword">null</span>, </div><div class="line">  Long::sum);</div></pre></td></tr></table></figure></p>
<p>The <code>reduce</code> operation returns null, if the map is empty, or all entries have been filtered out. If there is only one element, its transformation is returned, and the accumulator is not applied. </p>
<p>There are specializations for <code>int</code>, <code>long</code> and <code>double</code> outputs with suffix <code>ToInt</code>, <code>ToLong</code>, and <code>ToDouble</code>. You need to transform the input to a primitive value and specify a default value and an accumulator function. The default value is returned when the map is empty.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> sum = map.reduceValuesToLong(threshold, </div><div class="line">  Long::longValue, <span class="comment">// Transformer to primitive type</span></div><div class="line">  <span class="number">0</span>, <span class="comment">// Default value for empty map</span></div><div class="line">  Long::sum <span class="comment">// Primitive type accumulator</span></div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>These specializations act differently from the object versions where there is only one element to be considered. Instead of returning the transformed element, it is accumulated with the default. Therefore, the default must be the neutral element of the accumulator. </p>
<h3 id="Set-Views"><a href="#Set-Views" class="headerlink" title="Set Views"></a>Set Views</h3><p>The static <code>newKeySet</code> method yields a <code>Set&lt;K&gt;</code> that is actually a wrapper around a <code>ConcurrentHashMap&lt;Km, Boolean&gt;</code>. (All map values are <code>Boolean.TRUE</code>.)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set&lt;String&gt; words = ConcurrentHashMap.&lt;String&gt;newKeySet();</div></pre></td></tr></table></figure></p>
<p><code>keySet</code>: yields the set of keys. The set is mutable. If you remove the set’s elements, the keys(and their values) are removed from the map. But it doesn’t make sense to add elements to the key set, becase there would be no corresponding values to add. Java 8 adds a second <code>keySet</code> method to <code>ConcurrentHashMap</code>, with a default value, to be used when adding elements to the set:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set&lt;String&gt; words = map.keySet(<span class="number">1L</span>);</div><div class="line">words.add(<span class="string">"Java"</span>);</div></pre></td></tr></table></figure></p>
<p>If “Java” wasn’t already present in words, it now has a value of one.  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chapter-6-Concurrency-Enhancements&quot;&gt;&lt;a href=&quot;#Chapter-6-Concurrency-Enhancements&quot; class=&quot;headerlink&quot; title=&quot;Chapter 6 Concurrency En
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 9</title>
    <link href="http://blog.kiyanpro.com/2016/03/29/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-9/"/>
    <id>http://blog.kiyanpro.com/2016/03/29/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-9/</id>
    <published>2016-03-30T01:19:11.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-6-Concurrency-Enhancements"><a href="#Chapter-6-Concurrency-Enhancements" class="headerlink" title="Chapter 6 Concurrency Enhancements"></a>Chapter 6 Concurrency Enhancements</h1><p><code>java.util.concurrent</code> is a mix of useful utilities for the application programmer and power tools for library authors, without much effort to separate the two. </p>
<p>Key points:</p>
<ul>
<li>Updating atomic variables has become simpler with the <code>updateAndGet/accumulateAndGet</code> methods.</li>
<li><code>LongAccumulator</code>/<code>DoubleAccumulator</code> are more efficient than <code>AtomicLong</code>/<code>AtomicDouble</code> under high contention. </li>
<li>Updating entries in a <code>ConcurrentHashMap</code> has become simpler with the <code>compute</code> and <code>merge</code> methods. </li>
<li><code>ConcurrentHashMap</code> now has bulk operations <code>search</code>, <code>reduce</code>, <code>forEach</code>, with variants operating on keys, values, keys and values, and entries.</li>
<li>A set view lets you use a <code>ConcurrentHashMap</code> as <code>Set</code>. </li>
<li>The <code>Arrays</code> class has methods for parallel sorting, filling, and prefix operations. </li>
<li>Completable futures let you compose asynchronous operations. </li>
</ul>
<h2 id="Atomic-Values"><a href="#Atomic-Values" class="headerlink" title="Atomic Values"></a>Atomic Values</h2><p><code>java.util.concurrent.atomic</code> package provided classes for lock-free mutation of variables since Java 5. You can safely generate a sequence of numbers like below:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> AtomicLong nextNumber = <span class="keyword">new</span> AtomicLong();</div><div class="line"><span class="comment">// In some thread...</span></div><div class="line"><span class="keyword">long</span> id = nextNumber.incrementAndGet();</div></pre></td></tr></table></figure></p>
<p><code>incrementAndGet</code>: atomically increments the <code>AtomicLong</code> and returns the post-increment value. </p>
<p>If you want to make a more complex update, you have to use the <code>compareAndSet</code> method. Suppose you want to keep track of the largest value that is observed by different thread.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> AtomicLong largest = <span class="keyword">new</span> AtomicLong();</div><div class="line"><span class="comment">// In some thread...</span></div><div class="line">largest.set(Math.max(largest.get(), observed)); <span class="comment">// Error - race condition!</span></div></pre></td></tr></table></figure></p>
<p>Instead, compute the new value and use <code>compareAndSet</code> in a loop.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  oldValue = largest.get();</div><div class="line">  newValue = Math.max(oldValue, observed);</div><div class="line">&#125; <span class="keyword">while</span> (!largest.compareAndSet(oldValue, newValue));</div></pre></td></tr></table></figure></p>
<p>If another thread is also updating <code>largest</code>, it is possible the it has beat this thread to it. Then <code>compareAndSet</code> will return <code>false</code> without setting the new value. The loop tries again. Eventually, it will succeed replacing the existing value with the new one. The <code>compareAndSet</code> method maps to a processor operation that is faster than using a lock. </p>
<p>In Java 8, you can use a lambda expression.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">largest.updateAndGet(x -&gt; Math.max(x, observed));</div><div class="line"><span class="comment">// or </span></div><div class="line">largest.accumulateAndGet(observed, Math::max);</div></pre></td></tr></table></figure></p>
<p>The <code>accumulateAndGet</code> method takes a binary operator that is used to combine the atomic value and the supplied argument. </p>
<p>Also see <code>getAndUpdate</code> and <code>getAndAccumulate</code> the return the old value. </p>
<p>These methods are also provided for: </p>
<ul>
<li><code>AtomicInteger</code></li>
<li><code>AtomicIntegerArray</code></li>
<li><code>AtomicIntegerFieldUpdater</code></li>
<li><code>AtomicLongArray</code></li>
<li><code>AtomicLongFieldUpdater</code></li>
<li><code>AtomicReference</code></li>
<li><code>AtomicReferenceArray</code></li>
<li><code>AtomicReferenceFieldUpdater</code></li>
</ul>
<p><code>LongAdder</code> and <code>LongAccumulator</code> can be used to solve the problem that a large number of threads accessing the same atomic values. </p>
<p><code>LongAdder</code>: composed of multiple variables whose collective sum is the current value. Multiple threads can update different summands, and new summands are automatically provided when the number of threads increases. Efficient when the value of the sum is not needed until after all work has been done. If you anticipate high contention, you should simply use a <code>LongAdder</code> instead of an <code>AtomicLong</code>. Call <code>increment</code> to increment a counter, or <code>add</code> to add a quantity, and <code>sum</code> to retrieve the total. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> LongAdder adder = <span class="keyword">new</span> LongAdder();</div><div class="line"><span class="keyword">for</span> (...) </div><div class="line">  pool.submit(() -&gt; &#123;</div><div class="line">    <span class="keyword">while</span> (...) &#123;</div><div class="line">      ...</div><div class="line">      <span class="keyword">if</span> (...) adder.increment();</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="keyword">long</span> total = adder.sum();</div></pre></td></tr></table></figure>
<p><code>increment</code> does not return the old value which would undo the efficiency gain. </p>
<p><code>LongAccumulator</code>: generalizes the idea to an arbitrary accumulation operaiton. Provide the operation and its neutral element in the constructor. Call <code>accumulate</code> to incorporate new values. Call <code>get</code> to obtain the current value.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LongAccumulator adder = <span class="keyword">new</span> LongAccumulator(Long::sum, <span class="number">0</span>);</div><div class="line"><span class="comment">// In some thread...</span></div><div class="line">adder.accumulate(value);</div></pre></td></tr></table></figure></p>
<p>Internally, the accumulator has variables a<sub>1</sub>, a<sub>2</sub>, …, a<sub>n</sub>. Each variable is initialized with the neutral element. </p>
<p>When <code>accumulate</code> is called with value v, then one of them is atomically updated as a<sub>i</sub> = a<sub>i</sub> op v, where op is the accumulation operation written in infix form. In the above example, a call to <code>accumulate</code> computes a<sub>i</sub> = a<sub>i</sub> + v for some i. </p>
<p>The result of <code>get</code> is a<sub>1</sub> op a<sub>2</sub> op … op a<sub>n</sub>. </p>
<p>If you choose a different operation, you can compute maximum or minimum. </p>
<p>The operation must be associative and commutative, meaning that the final result must be independent of the order. </p>
<p><code>DoubleAdder</code> and <code>DoubleAccumulator</code> work in the same way with <code>double</code> values. </p>
<p><code>StampedLock</code>: can be used to implement optimistic reads. Not recommended to use locks.</p>
<p>First call <code>tryOptimisticRead</code>, upon which you get a “stamp”. Read your values and check whether the stamp is still valid(no other thread has obtained a write lock). If so, you can use the values. If not, get a read lock (which blocks any writers).<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line">  <span class="keyword">private</span> Object[] elements;</div><div class="line">  <span class="keyword">private</span> StampedLock lock = <span class="keyword">new</span> StampedLock();</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> stamp = lock.tryOptimisticRead();</div><div class="line">    Object[] currentElements = elements;</div><div class="line">    <span class="keyword">int</span> currentSize = size;</div><div class="line">    <span class="keyword">if</span> (!lock,validate(stamp)) &#123; <span class="comment">// Someone else had a write lock</span></div><div class="line">      stamp = lock.readLock(); <span class="comment">// Get a pessimistic lock</span></div><div class="line">      currentElements = elements;</div><div class="line">      currentSize = size;</div><div class="line">      lock.unlockRead(stamp);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> n &lt; currentSize ? currentElements[n] : <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chapter-6-Concurrency-Enhancements&quot;&gt;&lt;a href=&quot;#Chapter-6-Concurrency-Enhancements&quot; class=&quot;headerlink&quot; title=&quot;Chapter 6 Concurrency En
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 8</title>
    <link href="http://blog.kiyanpro.com/2016/03/25/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-8/"/>
    <id>http://blog.kiyanpro.com/2016/03/25/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-8/</id>
    <published>2016-03-26T02:17:35.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-5-The-New-Date-and-Time-API"><a href="#Chapter-5-The-New-Date-and-Time-API" class="headerlink" title="Chapter 5 The New Date and Time API"></a>Chapter 5 The New Date and Time API</h1><h2 id="Date-Adjusters"><a href="#Date-Adjusters" class="headerlink" title="Date Adjusters"></a>Date Adjusters</h2><p>Compute dates such as “the first Tuesday of every month”. </p>
<p><code>TemporalAdjusters</code>: provides a number of static methods for common adjustments. You pass the result of an adjustment method to the <code>with</code> method.<br><code>with</code>: returns a new <code>LocalDate</code> object without modifying the original.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalDate firstTuesday = LocalDate.of(year, month, <span class="number">1</span>).with(TemporalAdjusters.nextOrSame(DayOfWeek.TUESDAY));</div></pre></td></tr></table></figure></p>
<p><strong>Available Adjusters in the TemporalAdjusters Class</strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Method</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">next(weekday), previous(weekday)</td>
<td style="text-align:left">Next or previous date that falls on the given weekday</td>
</tr>
<tr>
<td style="text-align:left">nextOrSame(weekday), previousOrSame(weekday)</td>
<td style="text-align:left">Next or previous date that falls on the given weekday, starting from the given date</td>
</tr>
<tr>
<td style="text-align:left">dayOfWeekInMonth(m, weekday)</td>
<td style="text-align:left">The nth weekday in the month</td>
</tr>
<tr>
<td style="text-align:left">lastInMonth(weekday)</td>
<td style="text-align:left">The last weekday in the month</td>
</tr>
<tr>
<td style="text-align:left">firstDayOfMonth(), firstDayOfNextMonth(),<br>firstDayOfNextYear(), lastDayOfMonth(),<br>lastDayOfPreviousMonth(), lastDayOfYear()</td>
<td style="text-align:left">The date described in the method name</td>
</tr>
</tbody>
</table>
<p>Customize your own adjuster by implementing the <code>TemporalAdjuster</code> interface.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// computing the next weekday</span></div><div class="line">TemporalAdjuster NEXT_WORKDAY = w -&gt; &#123;</div><div class="line">  LocalDate result = (LocalDate) w;</div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    result = result.plusDays(<span class="number">1</span>);</div><div class="line">  &#125; <span class="keyword">while</span> (result.getDayOfWeek().getValue() &gt;= <span class="number">6</span>);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">LocalDate backToWork = today.with(NEXT_WORKDAY);</div></pre></td></tr></table></figure></p>
<p>Note that the parameter of the lambda expression has type <code>Temporal</code>, and it must be cast to <code>LocalDate</code>. You can avoid this cast with the <code>ofDateAdjuster</code> method that expects a lambda of type <code>UnaryOperator&lt;LocalDate&gt;</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">TemporalAdjuster NEXT_WORKDAY = TemporalAdjusters.ofDateAdjuster(w -&gt; &#123;</div><div class="line">  LocalDate result = w; <span class="comment">// No cast</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    result = result.plusDays(<span class="number">1</span>);</div><div class="line">  &#125; <span class="keyword">while</span> (reuslt.getDayOfWeek().getValue() &gt;= <span class="number">6</span>);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="Local-Time"><a href="#Local-Time" class="headerlink" title="Local Time"></a>Local Time</h2><p><code>LocalTime</code>: represents a time of day, such as 15:30:00. Create an instance with <code>now</code> or <code>of</code> methods.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LocalTime rightNow = LocalTime.now();</div><div class="line">LocalTime bedtime = LocalTime.of(<span class="number">22</span>, <span class="number">30</span>);</div><div class="line">LocalTime.of(<span class="number">22</span>, <span class="number">30</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p><strong>Common LocalTime Methods</strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Method</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">now, of</td>
<td style="text-align:left">These static methods construct a LocalTime, either from the curreqnt time, or from the given hours, minutes, and optionally, seconds and nanoseconds</td>
</tr>
<tr>
<td style="text-align:left">plusHours, plusMinutes,<br>plusSeconds, plusNanos</td>
<td style="text-align:left">Adds a number of horus, minutes, seconds, or nanoseconds to the LocalTime</td>
</tr>
<tr>
<td style="text-align:left">minusHours, minusMinutes,<br>minusSeconds, minusNanos</td>
<td style="text-align:left">Subtracts a number of hours, minutes, seconds, or nanoseconds to the LocalTime</td>
</tr>
<tr>
<td style="text-align:left">plus, minus</td>
<td style="text-align:left">Adds or subtracts a Duration</td>
</tr>
<tr>
<td style="text-align:left">withHour, withMinute, withSecond, withNano</td>
<td style="text-align:left">Returns a new LocalTime with the hour, minute, second or nanosecond changed to the given value</td>
</tr>
<tr>
<td style="text-align:left">getHour, getMinute, getSecond, getNano</td>
<td style="text-align:left">Gets the hour, minute, second, or nanosecond of this LocalTime</td>
</tr>
<tr>
<td style="text-align:left">toSecondOfDay, toNanoOfDay</td>
<td style="text-align:left">Returns the number of seconds or nanoseconds between midnight and this LocalTime</td>
</tr>
</tbody>
</table>
<p><code>plus</code> and <code>minus</code> operations wrap around a 24-hour day.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalTime wakeup = bedtime.plusHours(<span class="number">8</span>);</div></pre></td></tr></table></figure></p>
<p><code>LocalTime</code> doesn’t concern itself with AM/PM. Deal by <code>Formatter</code>. </p>
<p><code>LocalDateTime</code>: represents a date and time. Suitable for storing points in time in a fixed time zone. E.g., for a schedule of classes or events. </p>
<h2 id="Zoned-Time"><a href="#Zoned-Time" class="headerlink" title="Zoned Time"></a>Zoned Time</h2><p>Use <code>ZonedDateTime</code> if you need to make calculations that span the daylight savings time, or if you need to deal with users in different time zones. </p>
<p><code>ZoneId.getAvailableIds</code>: find out all available time zones. </p>
<p><code>ZoneId.of(id)</code>: yields a <code>ZoneId</code> object you can use to turn a <code>LocalDateTime</code> object into a <code>ZonedDateTime</code> object by calling <code>local.atZone(zoneId)</code>, or you can construct a <code>ZonedDateTime</code> by calling the static method <code>ZonedDateTime.of(year, month, day, hour, minute, second, nano, zoneId)</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZonedDateTime apollo1Launch = ZonedDateTime.of(<span class="number">1969</span>, <span class="number">7</span>, <span class="number">16</span>, <span class="number">9</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">0</span>, ZoneId.of(<span class="string">"America/New_York"</span>));</div></pre></td></tr></table></figure></p>
<p>Call <code>apollo1Launch.toInstant</code> to get the <code>Instant</code>. </p>
<p>Call <code>Instant.atZone(ZoneId.of(&quot;UTC&quot;))</code> to get the <code>ZonedDateTime</code> at the Greenwich Royal Observatory. Or use another <code>ZoneId</code> to get it elsewhere on the planet. </p>
<p><strong>ZonedDateTime Methods</strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Method</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">now, of, ofInstant</td>
<td style="text-align:left">These static methods construct a ZonedDateTime from the current time, or from a year, month, day, hour, minute, second, nanosecond(or a LocalDate and LocalTime), and ZoneId, or from an Instant and ZoneId</td>
</tr>
<tr>
<td style="text-align:left">plusDays, plusWeeks,<br>plusMonths, plusYears,<br>plusHours, plusMinutes,<br>plusSeconds, plusNanos</td>
<td style="text-align:left">Adds a number of temporal units to this <code>ZonedDateTime</code></td>
</tr>
<tr>
<td style="text-align:left">minusDays, minusWeeks,<br>minusMonths, minusYears,<br>minusHours, minusMinutes,<br>minusSeconds, minusNanos</td>
<td style="text-align:left">Subtracts a number of temporal units to this <code>ZonedDateTime</code></td>
</tr>
<tr>
<td style="text-align:left">plus, minus</td>
<td style="text-align:left">Adds or subtracts a <code>Duration</code> or <code>Period</code></td>
</tr>
<tr>
<td style="text-align:left">withDayOfMonth, withDayOfYear,<br>withMonth, withYear, withHour,<br>withMinute, withSecond,<br>withNano</td>
<td style="text-align:left">Returns a new <code>ZonedDateTime</code>, with one temporal unit changed to the given value</td>
</tr>
<tr>
<td style="text-align:left">withZoneSameInstant, withZoneSameLocal</td>
<td style="text-align:left">Returns a new <code>ZonedDateTime</code> in the given time zone, either representing the same instant or the same local time.</td>
</tr>
<tr>
<td style="text-align:left">getDayOfMonth</td>
<td style="text-align:left">Gets the day of the month (between 1 and 31).</td>
</tr>
<tr>
<td style="text-align:left">getDayOfYear</td>
<td style="text-align:left">Gets the day of the year (between 1 and 366).</td>
</tr>
<tr>
<td style="text-align:left">getDayOfWeek</td>
<td style="text-align:left">Gets the day of the week, returning a value of the <code>DayOfWeek</code> enumeration.</td>
</tr>
<tr>
<td style="text-align:left">getMonth, getMonthValue</td>
<td style="text-align:left">Gets the month as a value of the <code>Month</code> enumeration, or as a number between 1 and 12.</td>
</tr>
<tr>
<td style="text-align:left">getYear</td>
<td style="text-align:left">Gets the year, betweem -999,999,999 and 999,999,999</td>
</tr>
<tr>
<td style="text-align:left">getHour, getMinute, getSecond, getNano</td>
<td style="text-align:left">Gets the hour, minute, second, or nanosecond of this <code>ZonedDateTime</code></td>
</tr>
<tr>
<td style="text-align:left">getOffset</td>
<td style="text-align:left">Gets the offset from UTC, as a <code>ZoneOffset</code> instance. Offsets can vary from -12:00 to 14:00. Some time zones have fractional offsets. Offsets change with daylight savings time.</td>
</tr>
<tr>
<td style="text-align:left">toLocalDate, toLocalTime, toInstant</td>
<td style="text-align:left">Yields the local date or local time, or the corresponding instant.</td>
</tr>
<tr>
<td style="text-align:left">isBefore, isAfter</td>
<td style="text-align:left">Comapres this <code>ZonedDateTime</code> with another</td>
</tr>
</tbody>
</table>
<p>When daylight time starts, clocks are set forward by an hour.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ZonedDateTime skipped = ZonedDateTime.of(</div><div class="line">  LocalDate.of(<span class="number">2013</span>, <span class="number">3</span>, <span class="number">31</span>),</div><div class="line">  LocalTime.of(<span class="number">2</span>, <span class="number">30</span>),</div><div class="line">  ZonedId.of(<span class="string">"Europe/Berlin"</span>)</div><div class="line">); <span class="comment">// constructs March 31 3:30</span></div></pre></td></tr></table></figure></p>
<p>When daylight time ends, clocks are set back by an hour, and there are 2 instants with the same local time!<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ZonedDateTime ambiguous = ZonedDateTime.of(</div><div class="line">  LocalDate.of(<span class="number">2013</span>, <span class="number">10</span>, <span class="number">27</span>),</div><div class="line">  LocalTime.of(<span class="number">2</span>, <span class="number">30</span>),</div><div class="line">  ZoneId.of(<span class="string">"Europe/Berlin"</span>)</div><div class="line">); <span class="comment">// 2013-10-27T02:30+02:00[Europe/Berlin]</span></div><div class="line"></div><div class="line">ZonedDateTime anHourLater = ambiguous.plusHours(<span class="number">1</span>); <span class="comment">// 2013-10-27T02:30+01:00[Europe/Berlin]</span></div></pre></td></tr></table></figure></p>
<p>An hour later, the time has the same hours and minutes, but the zone offset has chagned. </p>
<p>Pay attentionwhen adjusting a date across daylight savings time boundaries. If you set a meeting for next week, don’t add a duration of 7 days:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZonedDateTime nextMeeting = meeting.plus(Duration.ofDays(<span class="number">7</span>)); <span class="comment">// won't work with daylight savings time</span></div></pre></td></tr></table></figure></p>
<p>Instead use the <code>Period</code> class:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZonedDateTime nextMeeting = meeting.plus(Period.ofDays(<span class="number">7</span>)); <span class="comment">// OK</span></div></pre></td></tr></table></figure></p>
<p><code>OffsetDateTime</code>: represents times with an offset from UTC, but without time zone rules. Intended for specialized applications that specifically require the absence of those rules, such as certain network protocols. For human time, use <code>ZonedDateTime</code>. </p>
<h2 id="Formatting-and-Parsing"><a href="#Formatting-and-Parsing" class="headerlink" title="Formatting and Parsing"></a>Formatting and Parsing</h2><p><code>DateTimeFormatter</code>: provides 3 kinds of formatters to print a date/time value:</p>
<ul>
<li>Predefined standard formatters</li>
<li>Locale-specific formatters</li>
<li>Formatters with custom patterns</li>
</ul>
<p><strong>Predefined Formatters</strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Formatter</th>
<th style="text-align:left">Description</th>
<th style="text-align:left">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">BASIC_ISO_DATE</td>
<td style="text-align:left">Year, month, day,<br>zone offset<br>without separators</td>
<td style="text-align:left">19690716-0500</td>
</tr>
<tr>
<td style="text-align:left">ISO_LOCAL_DATE,<br>ISO_LOCAL_TIME,<br>ISO_LOCAL_DATE_TIME</td>
<td style="text-align:left">Separators -, :, T</td>
<td style="text-align:left">1969-07-16, 09:32:00,<br>1969-07-16T09:32:00</td>
</tr>
<tr>
<td style="text-align:left">ISO_OFFSET_DATE,<br>ISO_OFFSET_TIME,<br>ISO_OFFSET_DATE_TIME</td>
<td style="text-align:left">Like ISO_LOCAL_XXX,<br>but with zone<br>offset</td>
<td style="text-align:left">1969-07-16-05:00,<br>09:32:00-05:00,<br>1969-07-16T09:32:00-05:00</td>
</tr>
<tr>
<td style="text-align:left">ISO_ZONED_DATE_TIME</td>
<td style="text-align:left">With zone offset<br>and zone ID</td>
<td style="text-align:left">1969-07-16T09:32:00-05:00[America/New_York]</td>
</tr>
<tr>
<td style="text-align:left">ISO_INSTANT</td>
<td style="text-align:left">In UTC, denoted by the Z zone ID</td>
<td style="text-align:left">1969-07-16T14:32:00Z</td>
</tr>
<tr>
<td style="text-align:left">ISO_DATE, ISO_TIME,<br>ISO_DATE_TIME</td>
<td style="text-align:left">Like ISO_OFFSET_DATE,<br>ISO_OFFSET_TIME,<br>ISO_ZONED_DATE_TIME,<br>but the zone<br>information is optional</td>
<td style="text-align:left">1969-07-16-05:00, 09:32:00-05:00,<br>1969-07-16T09:32:00-05:00[America/New_York]</td>
</tr>
<tr>
<td style="text-align:left">ISO_ORDINAL_DATE</td>
<td style="text-align:left">The year and day of year, for LocalDate</td>
<td style="text-align:left">1969-197</td>
</tr>
<tr>
<td style="text-align:left">ISO_WEEK_DATE</td>
<td style="text-align:left">The year, week, and day of week, for LocalDate</td>
<td style="text-align:left">1969-W29-3</td>
</tr>
<tr>
<td style="text-align:left">RFC_1123_DATE_TIME</td>
<td style="text-align:left">The standard for<br>email timestamps,<br>codified in<br>RFC 822 and<br>updated to four digits for the year<br> in RFC 1123</td>
<td style="text-align:left">Wed, 16, Jul 1969 09:32:00 -0500</td>
</tr>
</tbody>
</table>
<p>To use one of the standard formatters, simply call its <code>format</code> method.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String formatted = DateTimeFormatter.ISO_DATE_TIME.format(apollo1Launch);</div></pre></td></tr></table></figure></p>
<p>The standard formatters are mostly intended for machine-readable timestamps. To present date and times to human readers, use a local-specific formatter. 4 style: <code>SHORT</code>, <code>MEDIUM</code>, <code>LONG</code>, and <code>FULL</code>, for both date and time.</p>
<p><strong>Locale-Specific Formatting Styles</strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Style</th>
<th style="text-align:left">Date</th>
<th style="text-align:left">Time</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SHORT</td>
<td style="text-align:left">7/16/69</td>
<td style="text-align:left">9:32 AM</td>
</tr>
<tr>
<td style="text-align:left">MEDIUM</td>
<td style="text-align:left">Jul 16, 1969</td>
<td style="text-align:left">9:32:00 AM</td>
</tr>
<tr>
<td style="text-align:left">LONG</td>
<td style="text-align:left">July 16, 1969</td>
<td style="text-align:left">9:32:00 AM EDT</td>
</tr>
<tr>
<td style="text-align:left">FULL</td>
<td style="text-align:left">Wednesday, July 16, 1969</td>
<td style="text-align:left">9:32:00 AM EDT</td>
</tr>
</tbody>
</table>
<p>The static mehods <code>ofLocalizedDate</code>, <code>ofLocalizedTime</code>, and <code>ofLocalizedDateTime</code> craete such a formatter.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DateTimeFormatter formatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);</div><div class="line">String formatted = formatter.format(apollo1Launch); <span class="comment">// July 16, 1969 9:32:00 AM EDT</span></div></pre></td></tr></table></figure></p>
<p>The <code>java.time.format.DateTimeFormatter</code> class is intended as a replacement for <code>java.util.DateFormat</code>. If you need an instance of the latter for backwards compatibility, call <code>formatter.toFormat()</code>. </p>
<p>Finally, you can roll your own date format by specifying a pattern.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">formatter = DateTimeFormatter.ofPattern(<span class="string">"E yyyy-MM-dd HH:mm"</span>);</div></pre></td></tr></table></figure></p>
<p>Formats a date in the form <code>Wed 1969-07-16 09:32</code>. Each letter denotes a different time field. </p>
<p><strong>Commonly Used Formatting Symbols for Date/Time Formats</strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">ChronoField or Purpose</th>
<th style="text-align:left">Examples</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ERA</td>
<td style="text-align:left">G: AD, GGGG: Anno Domini, GGGGG: A</td>
</tr>
<tr>
<td style="text-align:left">YEAR_OF_ERA</td>
<td style="text-align:left">yy:69, yyyy:1969</td>
</tr>
<tr>
<td style="text-align:left">MONTH_OF_YEAR</td>
<td style="text-align:left">M:7, MM: 07, MMM: Jul, MMMM: July, MMMMM: J</td>
</tr>
<tr>
<td style="text-align:left">DAY_OF_MONTH</td>
<td style="text-align:left">d: 6, dd: 06</td>
</tr>
<tr>
<td style="text-align:left">DAY_OF_WEEK</td>
<td style="text-align:left">e: 3, E: Wed, EEEE: Wednesday, EEEEE: W</td>
</tr>
<tr>
<td style="text-align:left">HOUR_OF_DAY</td>
<td style="text-align:left">H: 9, HH: 09</td>
</tr>
<tr>
<td style="text-align:left">CLOCK_HOUR_OF_AM_PM</td>
<td style="text-align:left">K: 9, KK: 09</td>
</tr>
<tr>
<td style="text-align:left">AMPM_OF_DAY</td>
<td style="text-align:left">a: AM</td>
</tr>
<tr>
<td style="text-align:left">MINUTE_OF_HOUR</td>
<td style="text-align:left">mm: 02</td>
</tr>
<tr>
<td style="text-align:left">SECOND_OF_MINUTE</td>
<td style="text-align:left">ss: 00</td>
</tr>
<tr>
<td style="text-align:left">NANO_OF_SECOND</td>
<td style="text-align:left">nnnnnn: 000000</td>
</tr>
<tr>
<td style="text-align:left">Time zone ID</td>
<td style="text-align:left">W: America/New_York</td>
</tr>
<tr>
<td style="text-align:left">Time zone name</td>
<td style="text-align:left">z: EDT, zzzz: Eastern Daylight Time</td>
</tr>
<tr>
<td style="text-align:left">Zone offset</td>
<td style="text-align:left">x: -04, xx: -0400, xxx: -04:00, XXX: same, but use Z for zero</td>
</tr>
<tr>
<td style="text-align:left">Localized zone offset</td>
<td style="text-align:left">O: GMT-4, OOOO: GMT-04:00</td>
</tr>
</tbody>
</table>
<p>To parse a date/time value from a string, use one of the static <code>parse</code> method.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LocalDate churchsBirthday = LocalDate.parse(<span class="string">"1903-06-14"</span>);</div><div class="line">ZonedDateTime apollo1Launch = ZonedDateTime.parse(<span class="string">"1969-07-16 03:32:00-0400"</span>), DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ssxx"</span>));</div></pre></td></tr></table></figure></p>
<p>The first call uses the standard <code>ISO_LOCAL_DATE</code> formatter, the second one a custom formatter. </p>
<h2 id="Interoperating-with-Legacy-Code"><a href="#Interoperating-with-Legacy-Code" class="headerlink" title="Interoperating with Legacy Code"></a>Interoperating with Legacy Code</h2><p><code>Instant</code> is a close analog to <code>java.util.Date</code>. <code>Date</code> has 2 added methods: 1. <code>toInstant</code>: converts a <code>Date</code> to an <code>Instant</code> and 2. <code>from</code>: converts in the other direction. </p>
<p><code>ZonedDateTime</code> is a close analog to <code>java.util.GregorianCalendar</code>. <code>GregorianCalendar</code> has gained conversion methods too: 1. <code>toZonedDateTime</code>: converts a <code>GregorianCalendar</code> to a <code>ZonedDateTime</code> and 2. <code>from</code>: converts in the other direction. </p>
<p><strong>Conversions between java.time Classes and Legacy Classes</strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Classes</th>
<th style="text-align:left">To Legacy Class</th>
<th style="text-align:left">From Legacy Class</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Instant &lt;-&gt; java.util.Date</td>
<td style="text-align:left">Date.from(instant)</td>
<td style="text-align:left">date.toInstant()</td>
</tr>
<tr>
<td style="text-align:left">ZonedDateTime &lt;-&gt; java.util.GregorianCalendar</td>
<td style="text-align:left">GregorianCalendar.from(zonedDateTime)</td>
<td style="text-align:left">cal.toZonedDateTime()</td>
</tr>
<tr>
<td style="text-align:left">Instant &lt;-&gt; java.sql.Timestamp</td>
<td style="text-align:left">TimeStamp.from(instant)</td>
<td style="text-align:left">timestamp.toInstant()</td>
</tr>
<tr>
<td style="text-align:left">LocalDateTime &lt;-&gt; java.sql.Timestamp</td>
<td style="text-align:left">Timestamp.valueOf(localDateTime)</td>
<td style="text-align:left">timestamp.toLocalDateTime()</td>
</tr>
<tr>
<td style="text-align:left">LocalDate &lt;-&gt; java.sql.Date</td>
<td style="text-align:left">Date.valueOf(localDate)</td>
<td style="text-align:left">date.toLocalDate()</td>
</tr>
<tr>
<td style="text-align:left">LocalTime &lt;-&gt; java.sql.Time</td>
<td style="text-align:left">Time.valueOf(localTime)</td>
<td style="text-align:left">time.toLocalTime()</td>
</tr>
<tr>
<td style="text-align:left">DateTimeFormatter &lt;-&gt; java.text.DateFormat</td>
<td style="text-align:left">formatter.toFormat()</td>
<td style="text-align:left">None</td>
</tr>
<tr>
<td style="text-align:left">java.util.TimeZone &lt;-&gt; ZoneId</td>
<td style="text-align:left">Timezone.getTimezone(id)</td>
<td style="text-align:left">timeZone.toZoneId()</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chapter-5-The-New-Date-and-Time-API&quot;&gt;&lt;a href=&quot;#Chapter-5-The-New-Date-and-Time-API&quot; class=&quot;headerlink&quot; title=&quot;Chapter 5 The New Date
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 7</title>
    <link href="http://blog.kiyanpro.com/2016/03/24/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-7/"/>
    <id>http://blog.kiyanpro.com/2016/03/24/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-7/</id>
    <published>2016-03-25T01:29:00.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Chapter 4 JavaFx is skipped for now. </p>
<h1 id="Chapter-5-The-New-Date-and-Time-API"><a href="#Chapter-5-The-New-Date-and-Time-API" class="headerlink" title="Chapter 5 The New Date and Time API"></a>Chapter 5 The New Date and Time API</h1><p>Learn what makes time computations so vexing, and how the new Data and Time API solves these issues. </p>
<p>Key points:</p>
<ul>
<li>All <code>java.time</code> objects are immutable</li>
<li>All <code>Instant</code> is a point on the time line (similar to <code>Date</code>)</li>
<li>In Java time, each day has exactly 86,400 seconds (i.e, no leap seconds)</li>
<li>A <code>Duration</code> is the difference between two instants</li>
<li><code>LocalDateTime</code> has no time zone information</li>
<li><code>TemporalAdjuster</code> methods handle common calendar computations, such as finding the first Tuesday of a month</li>
<li><code>ZonedDateTime</code> is a point in time in a given time zone (similar to <code>GregorianCalendar</code>)</li>
<li>Use a <code>Period</code>, not a <code>Duration</code>, when advancing zoned time, in order to account for daylight savings time changes</li>
<li>Use <code>DateTimeFormatter</code> to format and parse dates and times</li>
</ul>
<h2 id="The-Time-Line"><a href="#The-Time-Line" class="headerlink" title="The Time Line"></a>The Time Line</h2><p>The Java Date and Time API specification requires that Java uses a time scale that </p>
<ul>
<li>Has 86,400 seconds per day</li>
<li>Exactly matches the official time at noon each day</li>
<li>Closely matches it elsewhere, in a precisely defined way</li>
</ul>
<p><code>Instant</code>: represents a point on the time line.<br><code>Instant.MIN</code>: go back as far as a billion years.<br><code>Instant.MAX</code>: December 31 of the year 1,000,000,000<br><code>Instant.now()</code>: gives the current instant<br>You can compare two instants with the <code>equals</code> and <code>compareTo</code> methods in the usual way, so you can use instants as timestamps. </p>
<p><code>Duration.between</code>: find out the difference between two instants<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// measure the running time of an algorithm</span></div><div class="line">Instant start = Instant.now();</div><div class="line">runAlgorithm();</div><div class="line">Instant end = Instant.now();</div><div class="line">Duration timeElapsed = Duration.between(start, end);</div><div class="line"><span class="keyword">long</span> millis = timeElapsed.toMills();</div></pre></td></tr></table></figure></p>
<p><code>Duration</code>: the amount of time between 2 instants.<br>You can use <code>toNanos</code>, <code>toMillis</code>, <code>toSeconds</code>, <code>toMinutes</code>, <code>toHours</code>, <code>toDays</code> to get the length of a Duration. </p>
<p>Durations require more than a <code>long</code> for their internal storage. The number of seconds is stored in a <code>long</code>, and the number of <code>nanoseconds</code> in an additional <code>int</code>.<br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Method</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">plus, minus</td>
<td style="text-align:left">Adds a duration to, or subtracts a duration from, this <code>Instant</code> or <code>Duration</code></td>
</tr>
<tr>
<td style="text-align:left">plusNanos, plusMillis, plusSeconds<br>plusMinutes, plusHours, plusDays</td>
<td style="text-align:left">Adds a number of the given time units to this <code>Instant</code> or <code>Duration</code></td>
</tr>
<tr>
<td style="text-align:left">minusNanos, minusMillis, minusSeconds<br>minusMinutes, minusHours, minusDays</td>
<td style="text-align:left">Subtracts a number of the given time units from this <code>Instant</code> or <code>Duration</code></td>
</tr>
<tr>
<td style="text-align:left">multipliedBy, dividedBy, negated</td>
<td style="text-align:left">Returns a duration that is obtained by multiplying or dividing this Duration by a given long, or by -1. Note that you can scale only durations, not instants</td>
</tr>
<tr>
<td style="text-align:left">isZero, isNegative</td>
<td style="text-align:left">Checks whether this Duration is zero or negative.</td>
</tr>
</tbody>
</table>
<p>It takes almost 300 years of nanoseconds to overflow a <code>long</code>. </p>
<p>If you want to check whether an algorithm is ten times faster than another<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Duration timeElapsed2 = Duration.between(start2, end2);</div><div class="line"><span class="keyword">boolean</span> overTenTimesFaster = timeElapsed.multipliedBy(<span class="number">10</span>).minus(timeElapsed2).isNegative();</div><div class="line"><span class="comment">// or timeElapsed.toNanos() * 10 &lt; timeElapsed2.toNanos()</span></div></pre></td></tr></table></figure></p>
<p>The <code>Instant</code> and <code>Duration</code> classes are immutable, and all methods, such as <code>multipliedBy</code> or <code>minus</code>, return new instance. </p>
<h2 id="Local-Dates"><a href="#Local-Dates" class="headerlink" title="Local Dates"></a>Local Dates</h2><p>Human time: local date/time and zoned time. </p>
<p>Local date/time has a date and/or time of day, but no associated time zone information. </p>
<p>Do not use zoned time unless you really want to represent absolute time instances. Birthdays, holidays, shecdule times and so on are best represented as local dates or times. </p>
<p><code>LocalDate</code>: is a date, with a year, month, and day of the month. Construct one with <code>now</code> or <code>of</code> static methods.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LocalDate today = LocalDate.now();</div><div class="line">LocalDate alonzosBirthday = LocalDate.of(<span class="number">1903</span>, <span class="number">6</span>, <span class="number">14</span>);</div><div class="line">alonzosBirthday  = LocalDate.of(<span class="number">1903</span>, Month.JUNE, <span class="number">14</span>);</div></pre></td></tr></table></figure></p>
<p>Months are not zero-based but usual numbers for the month of year. Or you can use the <code>Month</code> enumeration. </p>
<p><strong>Most useful methods for working with <code>LocalDate</code> objects</strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Method</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">now, of</td>
<td style="text-align:left">Construct a <code>LocalDate</code>, either from the current time or from a given year, month and day</td>
</tr>
<tr>
<td style="text-align:left">plusDays, plusWeeks,<br>plusMonths, plusYears</td>
<td style="text-align:left">Adds a number of days, weeks, months or years to this <code>LocalDate</code></td>
</tr>
<tr>
<td style="text-align:left">minusDays, minusWeeks,<br>minusMonths, minusYears</td>
<td style="text-align:left">Subtracts a number of days, weeks, months or years to this <code>LocalDate</code></td>
</tr>
<tr>
<td style="text-align:left">plus, minus</td>
<td style="text-align:left">Adds or subtracts a <code>Duration</code> or <code>Period</code></td>
</tr>
<tr>
<td style="text-align:left">withDayOfMonth, withDayOfyear,<br>withMonth, withYear</td>
<td style="text-align:left">Returns a new <code>LocalDate</code> with the day of month, day of year, month, or year changed to the given value</td>
</tr>
<tr>
<td style="text-align:left">getDayOfMonth</td>
<td style="text-align:left">Gets the day of the month (between 1 and 31)</td>
</tr>
<tr>
<td style="text-align:left">getDayOfYear</td>
<td style="text-align:left">Gets the day of the year (between 1 and 366)</td>
</tr>
<tr>
<td style="text-align:left">getDayOfWeek</td>
<td style="text-align:left">Gets the day of the week, returning a value of <code>DayOfWeek</code> enumeration</td>
</tr>
<tr>
<td style="text-align:left">getMonth, getMonthValue</td>
<td style="text-align:left">Gets the month as a value the <code>Month</code> enumeration, or as a number between 1 and 12</td>
</tr>
<tr>
<td style="text-align:left">getYear</td>
<td style="text-align:left">Gets the year, between -999,999,999 and 999,999,999</td>
</tr>
<tr>
<td style="text-align:left">until</td>
<td style="text-align:left">Gets the <code>Period</code>, or the number of the given <code>ChronoUnits</code>, between two dates</td>
</tr>
<tr>
<td style="text-align:left">isBefore, isAfter</td>
<td style="text-align:left">Compares the <code>LocalDate</code> with another</td>
</tr>
<tr>
<td style="text-align:left">isLeapYear</td>
<td style="text-align:left">Returns true if the year is a leap year - if it’s divisible by 4 but not by 100, or divisible by 400</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 256th day of the year - Programmer's day</span></div><div class="line">LocalDate programmersDay = LocalDate.of(<span class="number">2014</span>, <span class="number">1</span>, <span class="number">1</span>).plusDays(<span class="number">255</span>);</div></pre></td></tr></table></figure>
<p><code>Period</code>: the difference between two local dates, which expresses a number of elapsed years, months, or days. You can call <code>birthday.plus(Period.ofYears(1))</code> to get the birthday of next year. Or <code>birthday.plusYears(1)</code>. But <code>birthday.plus(Duration.ofDays(365))</code> won’t be correct in a leap year. </p>
<p><code>until</code>: yields the difference between 2 local dates.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">independenceDay.until(christmas); <span class="comment">// 5 months and 21 days</span></div></pre></td></tr></table></figure></p>
<p>To find the number of days, use<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">independenceDay.until(christmas, ChronoUnit.DAYS); <span class="comment">// 174 days</span></div></pre></td></tr></table></figure></p>
<p>Some methods could potentially create nonexistent dates. Adding one month to January 31 should not yield February 31. Instead of throwing an exception, these meethods return the last valid day of month.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// yield Feb. 29, 2016</span></div><div class="line">LocalDate.of(<span class="number">2016</span>, <span class="number">1</span>, <span class="number">31</span>).plusMonths(<span class="number">1</span>);</div><div class="line">LocalDate.of(<span class="number">2016</span>, <span class="number">3</span>, <span class="number">31</span>).minusMonths(<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p><code>getDayOfWeek</code>: yields the weekday, as a value of the <code>DayOfWeek</code> enumeration. <code>DayOfWeek.MONDAY</code> has the numerical value 1, and <code>DayOfWeek.SUNDAY</code> has the value 7.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalDate.of(<span class="number">1900</span>, <span class="number">1</span>, <span class="number">1</span>).getDayOfWeek().getValue(); <span class="comment">// 1</span></div></pre></td></tr></table></figure></p>
<p><code>DayOfWeek</code> enumeration has convenience methods <code>plus</code> and <code>minus</code> to compute weekdays modulo 7. <code>DayOfWeek.SATURDAY.plus(3)</code> yields <code>DayOfWeek.TUESDAY</code>. </p>
<p>Different from <code>LocalDate</code>, Sunday has value 1 and Saturday has value 7 in <code>java.util.Calendar</code>.</p>
<p><code>MonthDay</code>, <code>YearMonth</code> and <code>Year</code> are to describe partial dates in addition to <code>LocalDate</code>. December 25 can be represented as a <code>MonthDay</code>. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Chapter 4 JavaFx is skipped for now. &lt;/p&gt;
&lt;h1 id=&quot;Chapter-5-The-New-Date-and-Time-API&quot;&gt;&lt;a href=&quot;#Chapter-5-The-New-Date-and-Time-API&quot; cla
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 6</title>
    <link href="http://blog.kiyanpro.com/2016/03/23/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-6/"/>
    <id>http://blog.kiyanpro.com/2016/03/23/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-6/</id>
    <published>2016-03-24T01:25:54.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-3-Programming-with-Lambdas"><a href="#Chapter-3-Programming-with-Lambdas" class="headerlink" title="Chapter 3 Programming with Lambdas"></a>Chapter 3 Programming with Lambdas</h1><h2 id="Returning-Functions"><a href="#Returning-Functions" class="headerlink" title="Returning Functions"></a>Returning Functions</h2><p>Consider methods whose return type is a functional interface.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Image brightenedImage = transform(image, Color:brighter);</div></pre></td></tr></table></figure></p>
<p>Could you supply the desired brightness as an additional parameter to <code>transform</code>?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Image brightenedImage = transform(image, (c, factor) -&gt; c.deriveColor(<span class="number">0</span>, <span class="number">1</span>, factor, <span class="number">1</span>), <span class="number">1.2</span>);</div><div class="line"></div><div class="line"><span class="comment">// overload transform</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Iamge <span class="title">transform</span><span class="params">(Image in, BiFunction&lt;Color, T, Color&gt; f, T arg)</span></span></div></pre></td></tr></table></figure></p>
<p>Another way: we can make a method that returns the appropriate <code>UnaryOperator&lt;Color&gt;</code>, with the brightness set<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// returns a functional interface instance</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UnaryOperator&lt;Color&gt; <span class="title">brighten</span><span class="params">(<span class="keyword">double</span> factor)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> c -&gt; c.deriveColor(<span class="number">0</span>, <span class="number">1</span>, factor, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Image brightenedImage = transform(image, brighten(<span class="number">1.2</span>));</div></pre></td></tr></table></figure></p>
<p>The function(functional interface instance) can be passed to another method that expects such an interface. </p>
<p>You can write a method that yields a comparator for your needs, then pass to <code>Arrays.sort(values, comparatorGenerator(customization arguments))</code>.</p>
<h2 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h2><p>Using two transformations is not very efficient. We need to store intermediate results. It would be better if we could compose the operations and then apply the composite operation to each pixel.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">UnaryOperator&lt;T&gt; <span class="title">compose</span><span class="params">(UnaryOperator&lt;T&gt; op1, UnaryOperator&lt;T&gt; op2)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> t -&gt; op2.apply(op1.apply(t));</div><div class="line">&#125;</div><div class="line"></div><div class="line">Image finalImage = transform(image, compose(Color:brighter, Color:grayscale));</div></pre></td></tr></table></figure></p>
<h2 id="Laziness"><a href="#Laziness" class="headerlink" title="Laziness"></a>Laziness</h2><p>Accumulate all operations and then fuse them. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">LatentImage latent = transform(image, Color::brighter);</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LatentImage</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Image in;</div><div class="line">  <span class="keyword">private</span> List&lt;UnaryOperator&lt;Color&gt;&gt; pendingOperations;</div><div class="line">  ...</div><div class="line">  </div><div class="line">  <span class="function">LatentImage <span class="title">transform</span><span class="params">(UnaryOperator&lt;Color&gt; f)</span> </span>&#123;</div><div class="line">    pendingOperations.add(f);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>To avoid duplicate <code>transform</code> methods, an initial <code>stream()</code> operation is required to turn a collection into a stream. </p>
<p>Since we can’t add a method to the <code>Image</code> class, we can provide a <code>LatentImage</code> constructor or a static factory method.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LatentImage latent = LatentImage.from(image).transform(Color::brighter).transform(Color::grayscale);</div></pre></td></tr></table></figure></p>
<p>We can provide <code>toImage</code> method that applies all operations and returns the result<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Image finalImage = LatentImage.from(image)</div><div class="line">  .transform(Color::brighter).transform(Color::grayscale)</div><div class="line">  .toImage();</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> Image <span class="title">toImage</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> width = (<span class="keyword">int</span>) in.getWidth();</div><div class="line">  <span class="keyword">int</span> height = (<span class="keyword">int</span>) in.getHeight();</div><div class="line">  WritableImage out = <span class="keyword">new</span> WritableImage(width, height);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</div><div class="line">      Color c = in.getPixelReader().getColor(x, y);</div><div class="line">      <span class="keyword">for</span> (UnaryOperator&lt;Color&gt; f : pendingOperations) c = f.apply(c);</div><div class="line">      out.getPixelWriter().setColor(x, y, c);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Parallelizing-Operations"><a href="#Parallelizing-Operations" class="headerlink" title="Parallelizing Operations"></a>Parallelizing Operations</h2><p>When expressing operations as functional interfaces, the caller gives up control over the processing details, as long as the correct result is achieved. We can make use of concurrency. E.g, in image processing we can split the image into multiple strips and process each strip separately. </p>
<p>An example on concurrent image transformation.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Color[][] parallelTransform(Color[][] in, UnaryOperator&lt;Color&gt; f) &#123;</div><div class="line">  <span class="keyword">int</span> n = Runtime.getRuntime().availableProcessors();</div><div class="line">  <span class="keyword">int</span> height = in.length;</div><div class="line">  <span class="keyword">int</span> width = in[<span class="number">0</span>].length;</div><div class="line">  Color[][] out = <span class="keyword">new</span> Color[height][width];</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    ExecutorService pool = Executors.newCacheThreadPool();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">      <span class="keyword">int</span> fromY = i * height / n;</div><div class="line">      <span class="keyword">int</span> toY = (i + <span class="number">1</span>) * height / n;</div><div class="line">      pool.submit(() -&gt; &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++)</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> y = fromY; y &lt; toY; y++)</div><div class="line">            out[y][x] = f.apply(<span class="keyword">int</span>[y][x]);</div><div class="line">      &#125;);</div><div class="line">      pool.shutdown();</div><div class="line">      pool.awaitTermination(<span class="number">1</span>, TimeUnit.HOURS);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</div><div class="line">    ex.printStackTrace();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> out;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>In general, when you are given an object of a functional interface and you need to invoke it many times, ask yourself whether you can take advantage of concurrency. </p>
<h2 id="Dealing-with-Exceptions"><a href="#Dealing-with-Exceptions" class="headerlink" title="Dealing with Exceptions"></a>Dealing with Exceptions</h2><p>When an exception is thrown in a lambda expression, it is propagated to the caller. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doInOrder</span><span class="params">(Runnable first, Runnable second)</span> </span>&#123;</div><div class="line">  first.run();</div><div class="line">  second.run();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If <code>first.run()</code> throws an exception, then the <code>doInOrder</code> method is terminated, <code>second</code> is never run, and the caller gets to deal with the exception. </p>
<p>Suppose we execute the tasks asynchronously.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doInOrderAsync</span><span class="params">(Runnable first, Runnable second)</span> </span>&#123;</div><div class="line">  Thread t = <span class="keyword">new</span> Thread() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      first.run();</div><div class="line">      second.run();</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  t.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>If <code>first.run()</code> throws an exception, the thread is terminated, and <code>second</code> is never run. However, the <code>doInOrderAsync</code> returns right away and does the work in a separate thread, so it’s not possible to have the method rethrow the exception.</p>
<p>In this situation, it is good to supply a handler.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doInOrderAsync</span><span class="params">(Runnable first, Runnable second, Consumer&lt;Throwable&gt; handler)</span> </span>&#123;</div><div class="line">  Thread t = <span class="keyword">new</span> Thread() &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        first.run();</div><div class="line">        second.run();</div><div class="line">      &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">        handler.accept(t);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  t.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Suppose that the <code>first</code> produces a result that is consumed by <code>second</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doInOrderAsync</span><span class="params">(Supplier&lt;T&gt; first, Consumer&lt;T&gt; second, Consumer&lt;Throwable&gt; handler)</span> </span>&#123;</div><div class="line">  Thread t = <span class="keyword">new</span> Thread() &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        T result = first.get();</div><div class="line">        second.accept(result);</div><div class="line">      &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">        handler.accept(t);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  t.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Alternatively, we could make <code>second</code> a <code>Biconsumer&lt;T, Throwable&gt;</code> and have it deal with the exception from <code>first</code>.</p>
<p>It’s often inconvenient that methods is functional interfaces don’t allow check exception. You methods can accept functional interfaces whose methods allow checked exceptions, such as <code>Callable&lt;T&gt;</code> instead of <code>Supplier&lt;T&gt;</code>. A <code>Callable&lt;T&gt;</code> has a method that is declared as <code>T call() throws Exception</code>. </p>
<p>If you want an equivalent for a <code>Consumer</code> or a <code>Function</code>, you have to create it yourself.</p>
<p>Fix this problem with a generic wrapper.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Supplier&lt;T&gt; <span class="title">unchecked</span><span class="params">(Callable&lt;T&gt; f)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> () -&gt; &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">return</span> f.call();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">      <span class="keyword">throw</span> t;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Then you can pass a<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unchecked(() -&gt; <span class="keyword">new</span> String(Files.readAllBytes(Paths.get(<span class="string">"/etc/passwd"</span>)), StandardCharsets.UTF_8))</div></pre></td></tr></table></figure></p>
<p>to a <code>Supplier&lt;String&gt;</code>, even though the <code>readAllBytes</code> method throws an <code>IOException</code>. </p>
<p>This method cannot generate a <code>Consumer&lt;T&gt;</code> or a <code>Function&lt;T, U&gt;</code>. You would need to implement a variabtion of <code>unchecked</code> for each functional interface. </p>
<h2 id="Lambdas-and-Generics"><a href="#Lambdas-and-Generics" class="headerlink" title="Lambdas and Generics"></a>Lambdas and Generics</h2><p>You cannot construct a generic array at runtime. E.g, the <code>toArray()</code> method of <code>Collection&lt;T&gt;</code> and <code>Stream&lt;T&gt;</code> cannot call <code>T[] result = new T[n]</code>. Therefore, these methods return <code>Object[]</code> arrays. </p>
<p>With lambdas, we can pass the constructor.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String[] result = words.toArray(String[]::<span class="keyword">new</span>);</div></pre></td></tr></table></figure></p>
<p>When you implement such a method, the constructor expression is an <code>IntFunction&lt;T[]&gt;</code>, since the size of the array is passed to the constructor. In your code, you call <code>T[] result = constr.apply(n)</code>.</p>
<p><code>T</code> of <code>List&lt;T&gt;</code> is <em>invariant</em>. A method can decide to accept a <code>List&lt;? extends Person&gt;</code> if it only reads from the list. Then you can pass either a <code>List&lt;Person&gt;</code> or a <code>List&lt;Employee&gt;</code>. Or it can accept a <code>List&lt;? super Employee&gt;</code> if it only writes to the list. </p>
<p>In general, reading is covariant(subtypes are okay) and writing is contravariant(supertypes are okay). </p>
<p>As the implementor of a method that accepts lambda expressions with generic types, you simply add <code>? super</code> to any argument type that is not also a return type, and <code>? extends</code> to any return type that is not also an argumetn type. </p>
<h2 id="Monadic-Operations"><a href="#Monadic-Operations" class="headerlink" title="Monadic Operations"></a>Monadic Operations</h2><p>A design pattern for providing compositions funtions that yield values from generic types. </p>
<p>Consider a generic type <code>G&lt;T&gt;</code>, such as <code>List&lt;T&gt;</code>, <code>Optional&lt;T&gt;</code>, <code>Future&lt;T&gt;</code>. Also consider a function <code>T -&gt; U</code>, or a <code>Function&lt;T, U&gt;</code> object. It often makes sense to apply this function to a <code>G&lt;T&gt;</code>. </p>
<p>Generally, when you design a type <code>G&lt;T&gt;</code> and a function <code>T -&gt; U</code>, think whether it makes sense to define a <code>map</code> that yields a <code>G&lt;U&gt;</code>. Then generalize to functions <code>T -&gt; G&lt;U&gt;</code> and, if appropriate, provide <code>flatMap</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chapter-3-Programming-with-Lambdas&quot;&gt;&lt;a href=&quot;#Chapter-3-Programming-with-Lambdas&quot; class=&quot;headerlink&quot; title=&quot;Chapter 3 Programming wi
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 5</title>
    <link href="http://blog.kiyanpro.com/2016/03/22/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-5/"/>
    <id>http://blog.kiyanpro.com/2016/03/22/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-5/</id>
    <published>2016-03-22T23:44:25.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-3-Programming-with-Lambdas"><a href="#Chapter-3-Programming-with-Lambdas" class="headerlink" title="Chapter 3 Programming with Lambdas"></a>Chapter 3 Programming with Lambdas</h1><p>Learn how to create your own libraries that make use of lambda expressions and functional interfaces. </p>
<p>Key points:</p>
<ul>
<li>Main reason for using lambda expression: defer the execution of the code until an appropriate time</li>
<li>When a lambda expression is executed, make sure to provide any required data as inputs</li>
<li>Choose one of the existing functional interfaces if you can</li>
<li>It’s often useful to write methods that return an instance of a functional interface</li>
<li>When you work with transformations, consider how you can compose them</li>
<li>To compose transformations lazily, you need to keep a list of all pending transformations and apply them in the end</li>
<li>If you need to apply a lambda many times, you often have a chance to split up the work into subtasks that execute concurrently</li>
<li>Think what should happen when you work with a lambda expression that throws an exception</li>
<li>When working with generic functional interfaces, use <code>? super</code> wildcards for argument types, <code>? extends</code> wildcards for return types</li>
<li>When working with generic types that can be transformed by functions, consider supplying <code>map</code> and <code>flatMap</code></li>
</ul>
<h2 id="Deferred-Execution"><a href="#Deferred-Execution" class="headerlink" title="Deferred Execution"></a>Deferred Execution</h2><p>The point of all lambdas is deferred execution. Reasons for executing code later:</p>
<ul>
<li>Running the code in a separate thread</li>
<li>Running the code multiple times</li>
<li>Running the code at the right point in an algorithm(e.g, the comparison operation in sorting)</li>
<li>Running the code when something happens(a buttom was clicked, data has arrived, etc.)</li>
<li>Running the code only when necessary</li>
</ul>
<p>Suppose you log an event:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.info(<span class="string">"x: "</span> + x + <span class="string">", y: "</span> + y);</div></pre></td></tr></table></figure></p>
<p>If the log level is set to suppress INFO messages, the message string still gets computed and passed to the method, then it would be thrown away. It would be nicer if the string concatenation only happened when necessary. </p>
<p>Running code only when necessary is a use case for lambdas. Write a method that:</p>
<ol>
<li>Accepts the lambda</li>
<li>Checks whether it should be called</li>
<li>Calls it when necessary</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(Logger logger, Supplier&lt;String&gt; message)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (logger.isLoggable(Level.info))</div><div class="line">    logger.info(message.get());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The <code>info</code> method, as well as other logging methods, now have variants that accept a <code>Supplier&lt;String&gt;</code>. You can directly call <code>logger.info(() -&gt; &quot;x: &quot; + x + &quot;, y: &quot; + y);</code></p>
<h2 id="Parameters-of-Lambda-Expressions"><a href="#Parameters-of-Lambda-Expressions" class="headerlink" title="Parameters of Lambda Expressions"></a>Parameters of Lambda Expressions</h2><p>Comparator has 2 arguments<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(names, </div><div class="line">  (s, t) -&gt; Integer.compare(s.length(), t.length()));</div></pre></td></tr></table></figure></p>
<p>This method repeats an action multiple times<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">repeat</span><span class="params">(<span class="keyword">int</span> n, IntConsumer action)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) action.accept(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>We tell the action in which iteration it occurs. The action needs to capture that input in a parameter.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">repeat(<span class="number">10</span>, i -&gt; System.out.println(<span class="string">"Countdown: "</span> + (<span class="number">9</span> - i)));</div></pre></td></tr></table></figure></p>
<p>An event handler <code>button.setOnAction(event -&gt; action)</code>. The <code>event</code> object carries information that the action may need. </p>
<p>In general, you want to design your algorithm so that it passes any required information as arguments. However, if these arguments are rarely needed, consider supplying a second version that doesn’t force users into accepting unwanted arguments.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">repeat</span><span class="params">(<span class="keyword">int</span> n, Runnable action)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) action.run();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>This version can be called as<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">repeat(<span class="number">10</span>, () -&gt; System.out.println(<span class="string">"Hello, world!"</span>));</div></pre></td></tr></table></figure></p>
<h2 id="Choosing-a-Functional-Interface"><a href="#Choosing-a-Functional-Interface" class="headerlink" title="Choosing a Functional Interface"></a>Choosing a Functional Interface</h2><p>Function types are structural.</p>
<p>To specify a function that maps 2 strings into an integer, you use <code>Function2&lt;String, String, Integer&gt;</code> or <code>(String, String) -&gt; int</code>.</p>
<p>In Java, you instead declare the intent of the function, using a functional interface such as <code>Comparator&lt;String&gt;</code>.</p>
<p>In the theory of programming languages this is called <em>nominal</em> typing.</p>
<p>If you want to accept “any function” without particular semantics, there are some options. </p>
<table>
<thead>
<tr>
<th style="text-align:left">Functional Interfaces</th>
<th style="text-align:left">Parameter Types</th>
<th style="text-align:left">Return Type</th>
<th style="text-align:left">Abstract Method Name</th>
<th style="text-align:left">Description</th>
<th style="text-align:left">Other Methods</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Runnable</td>
<td style="text-align:left">none</td>
<td style="text-align:left">void</td>
<td style="text-align:left">run</td>
<td style="text-align:left">Runs an action without arguments or return value</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Supplier&lt;T&gt;</td>
<td style="text-align:left">none</td>
<td style="text-align:left">T</td>
<td style="text-align:left">get</td>
<td style="text-align:left">Supplies a value of type T</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Consumer&lt;T&gt;</td>
<td style="text-align:left">T</td>
<td style="text-align:left">void</td>
<td style="text-align:left">accept</td>
<td style="text-align:left">Consumes a value of type T</td>
<td style="text-align:left">andThen</td>
</tr>
<tr>
<td style="text-align:left">BiConsumer&lt;T, U&gt;</td>
<td style="text-align:left">T, U</td>
<td style="text-align:left">void</td>
<td style="text-align:left">accept</td>
<td style="text-align:left">Consumes values of types T and U</td>
<td style="text-align:left">andThen</td>
</tr>
<tr>
<td style="text-align:left">Function&lt;T, R&gt;</td>
<td style="text-align:left">T</td>
<td style="text-align:left">R</td>
<td style="text-align:left">apply</td>
<td style="text-align:left">A function with argument of type T</td>
<td style="text-align:left">compose<br>andThen<br>identity</td>
</tr>
<tr>
<td style="text-align:left">BiFunction&lt;T, U, R&gt;</td>
<td style="text-align:left">T, U</td>
<td style="text-align:left">R</td>
<td style="text-align:left">apply</td>
<td style="text-align:left">A function with arguments of types T and U</td>
<td style="text-align:left">andThen</td>
</tr>
<tr>
<td style="text-align:left">UnaryOperator&lt;T&gt;</td>
<td style="text-align:left">T</td>
<td style="text-align:left">T</td>
<td style="text-align:left">apply</td>
<td style="text-align:left">A unary operator on the type T</td>
<td style="text-align:left">compose<br>andThen<br>identity</td>
</tr>
<tr>
<td style="text-align:left">BinaryOperator&lt;T, T&gt;</td>
<td style="text-align:left">T, T</td>
<td style="text-align:left">T</td>
<td style="text-align:left">apply</td>
<td style="text-align:left">A binary operator of the type T</td>
<td style="text-align:left">andThen<br>maxBy<br>minBy</td>
</tr>
<tr>
<td style="text-align:left">Predicate&lt;T&gt;</td>
<td style="text-align:left">T</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">test</td>
<td style="text-align:left">A Boolean-valued function</td>
<td style="text-align:left">and<br>or<br>negate<br>isEqual</td>
</tr>
<tr>
<td style="text-align:left">Bipredicate&lt;T, U&gt;</td>
<td style="text-align:left">T, U</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">test</td>
<td style="text-align:left">A Boolean-valued function with 2 arguments</td>
<td style="text-align:left">and, or<br>negate</td>
</tr>
</tbody>
</table>
<p>Most of the standard functional interfaces have nonabstract methods for producing or combining functions.<br><code>Predicate.isEqual(a)</code> is the same as <code>a::equals</code>, provided a is not null. And there are default methods <code>and</code>, <code>or</code>, <code>negate</code> for combining predicates. E.g, <code>Predicate.isEqual(a).or(Predicate.isEqual(b))</code> is the same as <code>x -&gt; a.equals(x) || b.equals(x)</code>.</p>
<p>Applying <code>Color -&gt; Color</code> function to each pixel.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// use UnaryOperator&lt;Color&gt;</span></div><div class="line">Image brightenedImage = transform(image, Color::brighter);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Image <span class="title">transform</span><span class="params">(Image in, UnaryOperator&lt;Color&gt; f)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> width = (<span class="keyword">int</span>) in.getWidth();</div><div class="line">  <span class="keyword">int</span> height = (<span class="keyword">int</span>) in.getHeight();</div><div class="line">  WritableImage out = <span class="keyword">new</span> WritableImage(width, height);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height: y++) </div><div class="line">      out.getPixelWriter().setColor(x, y, f.apply(in.getPixelReader().getColor(x, y)));</div><div class="line">  <span class="keyword">return</span> out;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>No need for a <code>ColorTransformer</code> interface. </p>
<p><strong>Functional Interfaces for Primitive Types</strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Functional Interface</th>
<th style="text-align:left">Parameter Types</th>
<th style="text-align:left">Return Type</th>
<th style="text-align:left">Abstract Method Name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">BooleanSupplier</td>
<td style="text-align:left">none</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">getAsBoolean</td>
</tr>
<tr>
<td style="text-align:left"><em>P</em>Supplier</td>
<td style="text-align:left">none</td>
<td style="text-align:left"><em>P</em></td>
<td style="text-align:left">getAs<em>P</em></td>
</tr>
<tr>
<td style="text-align:left"><em>P</em>Consumer</td>
<td style="text-align:left"><em>P</em></td>
<td style="text-align:left">void</td>
<td style="text-align:left">accept</td>
</tr>
<tr>
<td style="text-align:left">Obj<em>P</em>Consumer</td>
<td style="text-align:left">T, <em>p</em></td>
<td style="text-align:left">void</td>
<td style="text-align:left">accept</td>
</tr>
<tr>
<td style="text-align:left"><em>P</em>Function&lt;T&gt;</td>
<td style="text-align:left"><em>p</em></td>
<td style="text-align:left">T</td>
<td style="text-align:left">apply</td>
</tr>
<tr>
<td style="text-align:left"><em>P</em>To<em>Q</em>Function</td>
<td style="text-align:left"><em>p</em></td>
<td style="text-align:left"><em>q</em></td>
<td style="text-align:left">applyAs<em>Q</em></td>
</tr>
<tr>
<td style="text-align:left">To<em>P</em>Function&lt;T&gt;</td>
<td style="text-align:left">T</td>
<td style="text-align:left"><em>p</em></td>
<td style="text-align:left">applyAs<em>P</em></td>
</tr>
<tr>
<td style="text-align:left">To<em>P</em>BiFunction&lt;T, U&gt;</td>
<td style="text-align:left">T, U</td>
<td style="text-align:left"><em>p</em></td>
<td style="text-align:left">applyAsP</td>
</tr>
<tr>
<td style="text-align:left"><em>P</em>UnaryOperator</td>
<td style="text-align:left"><em>p</em></td>
<td style="text-align:left"><em>p</em></td>
<td style="text-align:left">applyAs<em>P</em></td>
</tr>
<tr>
<td style="text-align:left"><em>P</em>BinaryOperator</td>
<td style="text-align:left"><em>p</em>, <em>p</em></td>
<td style="text-align:left"><em>p</em></td>
<td style="text-align:left">applyAs<em>P</em></td>
</tr>
<tr>
<td style="text-align:left"><em>P</em>Predicate</td>
<td style="text-align:left"><em>p</em></td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">test</td>
</tr>
</tbody>
</table>
<p><em>p</em>, <em>q</em> is int, long, double<br><em>P</em>, <em>Q</em> is Int, Long, Double</p>
<p>Supply your own functional interface. <code>(int, int, Color) -&gt; Color</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ColorTransformer</span> </span>&#123;</div><div class="line">  <span class="function">Color <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, Color colorAtXY)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>apply</code> is used for majority of standard functional interfaces. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chapter-3-Programming-with-Lambdas&quot;&gt;&lt;a href=&quot;#Chapter-3-Programming-with-Lambdas&quot; class=&quot;headerlink&quot; title=&quot;Chapter 3 Programming wi
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 4</title>
    <link href="http://blog.kiyanpro.com/2016/03/21/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-4/"/>
    <id>http://blog.kiyanpro.com/2016/03/21/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-4/</id>
    <published>2016-03-22T00:12:12.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-2-The-Stream-API"><a href="#Chapter-2-The-Stream-API" class="headerlink" title="Chapter 2 The Stream API"></a>Chapter 2 The Stream API</h1><h2 id="Grouping-and-Partioning"><a href="#Grouping-and-Partioning" class="headerlink" title="Grouping and Partioning"></a>Grouping and Partioning</h2><p><code>groupingBy</code>: forms groups of values with the same characteristic<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// grouping locales by country</span></div><div class="line">Map&lt;String, List&lt;Locale&gt;&gt; countryToLocales = locales.collect(Collectors.groupingBy(Locale::getCountry));</div></pre></td></tr></table></figure></p>
<p>The function <code>Locale::getCountry</code> is the <em>classifier function</em> of the grouping.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// look up all locales for a given country code</span></div><div class="line">List&lt;Locale&gt; swissLocales = countryToLocales.get(<span class="string">"CH"</span>);</div></pre></td></tr></table></figure></p>
<p>When the classifier function is a predicate function(that is, a function returning a <code>boolean</code> value), the stream elements are partitioned into 2 list: those where the function returns true and the complement. In this case it’s more efficient to use <code>partitioningBy</code> instead.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map&lt;Boolean, List&lt;Locale&gt;&gt; englishAndOtherLocales = locales.collect(Collectors.partitioningBy(l -&gt; l.getLanguage().equals(<span class="string">"en"</span>)));</div><div class="line"></div><div class="line">List&lt;Locale&gt; englishLocales = englishAndOtherLocales.get(<span class="keyword">true</span>);</div></pre></td></tr></table></figure></p>
<p>If you call the <code>groupingByConcurrent</code> method, you get a concurrent map that, when used with a parallel stream, is concurrently populated. Analogous to <code>toConcurrentMap</code>. </p>
<p>If you want sets instead of list, use downstream collector <code>Collectors.toSet</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">import</span> java.util.stream.Collectors.*;</div><div class="line"></div><div class="line">Map&lt;String, Set&lt;Locale&gt;&gt; countryToLocaleSet = locales.collect(groupingBy(Locale::getCountry, toSet()));</div></pre></td></tr></table></figure></p>
<p>Other downstream collectors<br><code>counting</code>: produces a count of the collected elements<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// counts how many locales there are for each country</span></div><div class="line">Map&lt;String, Long&gt; countryToLocaleCounts = locales.collect(groupingBy(Locale:: getCountry, counting()));</div></pre></td></tr></table></figure></p>
<p><code>summing(Int|Long|Double)</code>: takes a function argument, applies the function to the downstream elements, and produces their sum<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// the sum of populations per state in a stream of cities</span></div><div class="line">Map&lt;String, Integer&gt; stateToCityPopulation = cities.collect(groupingBy(City::getState, summingInt(City::getPopulation)));</div></pre></td></tr></table></figure></p>
<p><code>maxBy</code> and <code>minBy</code>: take a comparator and produce max and min of the downstream elements<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// the city with most population per state</span></div><div class="line">Map&lt;String, City&gt; stateToLargestCity = cities.collect(groupingBy(City::getState, maxBy(Comparator.comparing(City::getPopulation))));</div></pre></td></tr></table></figure></p>
<p><code>mapping</code>: applies a function to downstream results, and it requires yet another collector for processing its results<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// group cities by state</span></div><div class="line"><span class="comment">// within each state, produce the city names and reduce by max length</span></div><div class="line">Map&lt;String, Optional&lt;String&gt;&gt; stateToLongestCityName = cities.collect(</div><div class="line">  groupingBy(City::getState, </div><div class="line">    mapping(City::getName, maxBy(Comparator.comparing(String::length)))));</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// gather a set of all languages in a country</span></div><div class="line">Map&lt;String, Set&lt;String&gt;&gt; countryToLanguages = locales.collect(</div><div class="line">  groupingBy(l -&gt; l.getDisplayCountry(), </div><div class="line">    mapping(l -&gt; l.getDisplayLanguage(), toSet()))); <span class="comment">// no combining sets</span></div></pre></td></tr></table></figure>
<p>summary statistics object: if the grouping or mapping function has return type <code>int</code>, <code>long</code>, or <code>double</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, IntSummaryStatistics&gt; stateToCityPopulationSummary = cities.collect(</div><div class="line">  groupingBy(City::getState, summarizingInt(City::getPopulation))</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p><code>reducing</code>: applies a general reduction to downstream elements. 3 forms: </p>
<ul>
<li><code>reducing(binaryOperator)</code> (identity is null)</li>
<li><code>reducing(identity, binaryOperator)</code></li>
<li><code>reducing(identity, mapper, binaryOperator)</code>, mapper function is applied and its values are reduced</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// gets a comma-separated string of all city names in each state</span></div><div class="line">Map&lt;String, String&gt; stateToCityNames = cities.collect(</div><div class="line">  groupingBy(City::getState, reducing(<span class="string">""</span>, City::getName, </div><div class="line">    (s, t) -&gt; s.length() == <span class="number">0</span> ? t : s + <span class="string">", "</span> + t))</div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// more naturally, same result</span></div><div class="line">Map&lt;String, String&gt; stateToCityNames = cities.collect(</div><div class="line">  groupingBy(City::getState, </div><div class="line">    mapping(City::getName, joining(<span class="string">", "</span>)));</div><div class="line">);</div></pre></td></tr></table></figure>
<p>Only use downstream collectors in connection with <code>groupingBy</code> or <code>partitioningBy</code> to avoid convoluted expressions. Otherwise, simply use methods like <code>map</code>, <code>reduce</code>, <code>count</code>, <code>max</code> or <code>min</code> directly on streams. </p>
<h2 id="Primitive-Type-Streams"><a href="#Primitive-Type-Streams" class="headerlink" title="Primitive Type Streams"></a>Primitive Type Streams</h2><p>Wrap each integer into a wrapper object like <code>Stream&lt;Integer&gt;</code> is inefficient. Same for the other primitive types. </p>
<p><code>IntStream</code>, <code>LongStream</code>, <code>DoubleStream</code> can store primitive values directly.<br>For the other primitives:<br><code>IntStream</code>: store short, char, byte and boolean<br><code>DoubleStream</code>: float</p>
<p>Create an <code>IntStream</code>: use <code>IntStream.of</code> or <code>Arrays.stream</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntStream stream = IntStream.of(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">5</span>);</div><div class="line"><span class="comment">// or</span></div><div class="line">stream = Arrays.stream(values, from, to); <span class="comment">// values is an int[] array</span></div></pre></td></tr></table></figure></p>
<p><code>IntStream</code> and <code>LongStream</code> have static methods <code>range</code> and <code>rangeClosed</code> that generate integer ranges with step size one<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IntStream zeroToNinetyNine = IntStream.range(<span class="number">0</span>, <span class="number">100</span>); <span class="comment">// Upperbound excluded</span></div><div class="line">IntStream zeroToHundred = IntStream.rangeClose(<span class="number">0</span>, <span class="number">100</span>); <span class="comment">// Upperbound included</span></div></pre></td></tr></table></figure></p>
<p>The <code>CharSequence</code> interface has methods <code>codePoints</code> and <code>chars</code> that yield an <code>IntStream</code> of the Unicode codes of the characters or of the code units in the UTF-16 encoding<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String sentence = <span class="string">"\uD835\uDD46 is the set of octonions"</span>;</div><div class="line">IntStream codes = sentence.codePoints(); <span class="comment">// hex values</span></div></pre></td></tr></table></figure></p>
<p>Use <code>mapToInt</code>, <code>mapToLong</code>, <code>mapToDouble</code> methods to transform a stream of objects to primitive types<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; words = ...;</div><div class="line">IntStream lengths = words.mapToInt(String::length);</div></pre></td></tr></table></figure></p>
<p><code>boxed</code>: converts a primitive type stream to an object stream<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; integers = IntStream.range(<span class="number">0</span>, <span class="number">100</span>).boxed();</div></pre></td></tr></table></figure></p>
<p>Differences between primitive type streams and object streams:</p>
<ul>
<li><code>toArray</code> returns primitive type arrays</li>
<li>Methods that yield an optional result return an <code>OptionalInt</code>, <code>OptionalLong</code> or <code>OptionalDouble</code>. They have methods <code>getAsInt</code>, <code>getAsLong</code> and <code>getAsDouble</code> instead of <code>get</code>. </li>
<li><code>sum</code>, <code>average</code>, <code>max</code>, <code>min</code> are defined.</li>
<li>The <code>summaryStatistics</code> method yield an object of type <code>IntSummaryStatistics</code>, <code>LongSummaryStatistics</code>, or <code>DoubleSummaryStatistics</code></li>
</ul>
<p>The <code>Random</code> class has methods <code>ints</code>, <code>longs</code> and <code>doubles</code> that return primitive type streams of random numbers</p>
<h2 id="Parallel-Streams"><a href="#Parallel-Streams" class="headerlink" title="Parallel Streams"></a>Parallel Streams</h2><p>Must have a parallel stream to parallelize bulk operations. </p>
<p>By default, stream operations create sequential streams, except for <code>Collection.parallelStream()</code>. </p>
<p><code>parallel</code>: converts any sequential stream into a parallel one<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; parallelWords = Stream.of(wordArray).parallel();</div></pre></td></tr></table></figure></p>
<p>The operations are stateless and can be executed in arbitrary order.<br>A bad example, something you cannot do<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] shortWords = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">12</span>];</div><div class="line">words.parallel().forEach(</div><div class="line">  s -&gt; &#123; <span class="keyword">if</span> (s.length() &lt; <span class="number">12</span>) shortWords[s.length()]++; &#125;</div><div class="line">);</div><div class="line">System.out.println(Arrays.toString(shortWords));</div></pre></td></tr></table></figure></p>
<p>The function passed to <code>forEach</code> runs concurrently in multiple threads, updating a shared array. Race condition!</p>
<p>Ensure that any functions you pass to parallel stream operations are threadsafe. You can use an array of <code>AtomicInteger</code> objects. Or you can simply use the facilities of streams library and group strings by length. </p>
<p>By default, streams that arise from ordered collections (arrays and lists), from ranges, generators, and iterators, or from calling <code>Stream.sorted</code>, are ordered. </p>
<p>Some operations can be more effectively parallelized when the ordering requirement is dropped.<br><code>Stream.unordered</code> means there will be no ordering. <code>Stream.distinct</code> can benefit from it because on an ordered stream, <code>distinct</code> retains the first of all equal elements.That impedes parallelization. <code>limit</code> can be speeded up if you just want any n elements from a stream and don’t care which ones you get.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;T&gt; sample = stream.parallel().unordered().limit(n);</div></pre></td></tr></table></figure></p>
<p>Merging map is expensive. The <code>Collectors.groupingByConcurrent</code> method uses a shared concurrent map. The collector is unordered already.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, List&lt;String&gt;&gt; result = cities.parallel().collect(</div><div class="line">  Collectors.groupingByConcurrent(City::getState) <span class="comment">// values aren't collected in stream order</span></div><div class="line">);</div></pre></td></tr></table></figure></p>
<p><strong>Noninterference</strong><br>Do not modify the collection that is backing a stream while carrying out a stream operation, even if it’s threadsafe. Remember that streams don’t collect their own data - the data is always in a separate collection. </p>
<p>Since intermediate stream operations are lazy, it’s possible to mutate the collection up to the point when the terminal operation executes.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; wordList = ...;</div><div class="line">Stream&lt;String&gt; words = wordList.stream();</div><div class="line">wordsList.add(<span class="string">"END"</span>); <span class="comment">// OK</span></div><div class="line"><span class="keyword">long</span> n = words.distinct().count();</div></pre></td></tr></table></figure></p>
<p>Bad example updating collection during operation<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; words = wordList.stream();</div><div class="line">words.forEach(s -&gt; <span class="keyword">if</span> (s.length() &lt; <span class="number">12</span>)) wordList.remove(s)); <span class="comment">// interference</span></div></pre></td></tr></table></figure></p>
<h2 id="Functional-Interfaces"><a href="#Functional-Interfaces" class="headerlink" title="Functional Interfaces"></a>Functional Interfaces</h2><p><code>Predicate</code>: an interface with one nondefault method returning a boolean value<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T argument)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>boolean return type is important. </p>
<p><strong>Functional Interfaces Used in the Stream API</strong><br><br></p>
<table>
<thead>
<tr>
<th style="text-align:left">Functional Interfaces</th>
<th style="text-align:left">Parameter Types</th>
<th style="text-align:left">Return Type</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Supplier&lt;T&gt;</td>
<td style="text-align:left">None</td>
<td style="text-align:left">T</td>
<td style="text-align:left">Supplies a value of type T</td>
</tr>
<tr>
<td style="text-align:left">Consumer&lt;T&gt;</td>
<td style="text-align:left">T</td>
<td style="text-align:left">void</td>
<td style="text-align:left">Consumes a value of type T</td>
</tr>
<tr>
<td style="text-align:left">BiConsumer&lt;T, U&gt;</td>
<td style="text-align:left">T, U</td>
<td style="text-align:left">void</td>
<td style="text-align:left">Consumes values of types T and U</td>
</tr>
<tr>
<td style="text-align:left">Predicate&lt;T&gt;</td>
<td style="text-align:left">T</td>
<td style="text-align:left">boolean</td>
<td style="text-align:left">A Boolean-valued function</td>
</tr>
<tr>
<td style="text-align:left">ToIntFunction&lt;T&gt;<br>ToLongFunction&lt;T&gt;<br>ToDoubleFunction&lt;T&gt;</td>
<td style="text-align:left">T</td>
<td style="text-align:left">int<br>long<br>double</td>
<td style="text-align:left">An int-, long-, or double-valued function</td>
</tr>
<tr>
<td style="text-align:left">IntFunction&lt;R&gt;<br>LongFunction&lt;R&gt;<br>DoubleFunction&lt;R&gt;</td>
<td style="text-align:left">int<br>long<br>double</td>
<td style="text-align:left">R</td>
<td style="text-align:left">A function with argument of type int, long, or double</td>
</tr>
<tr>
<td style="text-align:left">Function&lt;T, R&gt;</td>
<td style="text-align:left">T</td>
<td style="text-align:left">R</td>
<td style="text-align:left">A function with argument of type T</td>
</tr>
<tr>
<td style="text-align:left">BiFunction&lt;T, U, R&gt;</td>
<td style="text-align:left">T, U</td>
<td style="text-align:left">R</td>
<td style="text-align:left">A function with arguments of types T and U</td>
</tr>
<tr>
<td style="text-align:left">UnaryOperator&lt;T&gt;</td>
<td style="text-align:left">T</td>
<td style="text-align:left">T</td>
<td style="text-align:left">A unary operator on the type T</td>
</tr>
<tr>
<td style="text-align:left">BinaryOperator&lt;T&gt;</td>
<td style="text-align:left">T, T</td>
<td style="text-align:left">T</td>
<td style="text-align:left">A binary operator on the type T</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chapter-2-The-Stream-API&quot;&gt;&lt;a href=&quot;#Chapter-2-The-Stream-API&quot; class=&quot;headerlink&quot; title=&quot;Chapter 2 The Stream API&quot;&gt;&lt;/a&gt;Chapter 2 The 
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 3</title>
    <link href="http://blog.kiyanpro.com/2016/03/17/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-3/"/>
    <id>http://blog.kiyanpro.com/2016/03/17/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-3/</id>
    <published>2016-03-18T03:05:32.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-2-The-Stream-API"><a href="#Chapter-2-The-Stream-API" class="headerlink" title="Chapter 2 The Stream API"></a>Chapter 2 The Stream API</h1><h2 id="Simple-Reductions"><a href="#Simple-Reductions" class="headerlink" title="Simple Reductions"></a>Simple Reductions</h2><p>reductions: reduces the stream to a value.<br>terminal operation: the stream ceases to be usable. </p>
<p>List of reductions: </p>
<ul>
<li>count</li>
<li>max</li>
<li>min</li>
<li>findFirst</li>
<li>findAny</li>
<li>anyMatch</li>
<li>allMatch</li>
<li>noneMatch</li>
</ul>
<p><code>count</code>: returns the number of elements of the stream.</p>
<p><code>max</code>: returns the largest value.<br><code>min</code>: returns the smallest value.<br>These methods return an <code>Optional&lt;T&gt;</code> value that either wraps the answer or indicates that there is none(empty stream).<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// get the maximum of a stream</span></div><div class="line">Optional&lt;String&gt; largest = words.max(String::compareToIgnoreCase);</div><div class="line"><span class="keyword">if</span> (largest.isPresent()) </div><div class="line">  System.out.println(<span class="string">"largest: "</span> + largest.get());</div></pre></td></tr></table></figure></p>
<p><code>findFirst</code>: returns the first value in a nonempty collection. Useful when combined with <code>filter</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// find the first word that starts with letter Q</span></div><div class="line">Optional&lt;String&gt; startsWithQ = words.filter(s -&gt; s.startsWith(<span class="string">"Q"</span>)).findFirst();</div></pre></td></tr></table></figure></p>
<p><code>findAny</code>: returns any match. Effective when you parallelize the stream since the first match in any of the examined segments will complete the computation.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Optional&lt;String&gt; startsWithQ = words.parallel().filter(s -&gt; s.startsWith(<span class="string">"Q"</span>).findAny());</div></pre></td></tr></table></figure></p>
<p><code>anyMatch</code>: just want to know there is a match. Takes a predicate argument.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> aWordStartsWithQ = words.parallel().anyMatch(s -&gt; s.startsWith(<span class="string">"Q"</span>));</div></pre></td></tr></table></figure></p>
<p><code>allMatch</code>: return true if all elements match a predicate.<br><code>noneMatch</code>: return true if no elements match a predicate.<br>These methods always examine the entire stream, but they still benefit from being run in parallel. </p>
<h2 id="The-Optional-Type"><a href="#The-Optional-Type" class="headerlink" title="The Optional Type"></a>The Optional Type</h2><p>Either a wrapper for an object of type <code>T</code> or for no object.<br>Intended as a safer alternative than a reference of type <code>T</code> that returns to an obejct or <code>null</code>. </p>
<h3 id="Working-with-Optional-Values"><a href="#Working-with-Optional-Values" class="headerlink" title="Working with Optional Values"></a>Working with Optional Values</h3><p><code>get</code>: gets the wrapped element if it exists, or throw a <code>NoSuchElementException</code> if it doesn’t<br><code>isPresent</code>: reports whether an <code>Optional&lt;T&gt;</code> object has a value<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Optional&lt;T&gt; optionalValue = ...;</div><div class="line"><span class="keyword">if</span> (optionalValue.isPresent())</div><div class="line">  optionalValue.get().someMethod();</div></pre></td></tr></table></figure></p>
<p>No easier than <code>if (value != null) value.someMethod();</code></p>
<p>The key to using <code>Optional</code> effectively is to <em>use a method that either consumes the correct value or produces an alternative</em>.<br><code>ifPresent</code>: accepts a function. If the optional value exists, it is passed to that function. Otherwise, nothing happens.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">optionalValue.ifPresent(v -&gt; Process v);</div><div class="line"><span class="comment">// add value to a set</span></div><div class="line">optionalValue.ifPresent(v -&gt; results.add(v));</div><div class="line">optionalValue.ifPresent(results::add);</div></pre></td></tr></table></figure></p>
<p>No value is returned in <code>ifPresent</code>. Instead, <code>map</code> returns the result.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Optional&lt;Boolean&gt; added = optionalValue.map(results::add);</div></pre></td></tr></table></figure></p>
<p><code>added</code> has one of 3 values: true or false wrapped into an <code>Optional</code>, if <code>optionalValue</code> was present, or an empty optional otherwise. </p>
<p><code>orElse</code>: sets a default when there is no match<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String result = optionalString.orElse(<span class="string">""</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// invoke code to compute default</span></div><div class="line">String result = optionalString.orElseGet(() -&gt; System.getProperty(<span class="string">"user.dir"</span>));</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// throw an exception if there is no value</span></div><div class="line">String result = optionalString.orElseThrow(NoSuchElementException::<span class="keyword">new</span>);</div></pre></td></tr></table></figure>
<h3 id="Creating-Optional-Values"><a href="#Creating-Optional-Values" class="headerlink" title="Creating Optional Values"></a>Creating Optional Values</h3><p><code>Optional.of(result)</code> and <code>Optional.empty()</code> are static methods to create Optionals.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;Double&gt; <span class="title">inverse</span><span class="params">(Double x)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> x == <span class="number">0</span> ? Optional.empty() : Optional.of(<span class="number">1</span> / x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>ofNullable</code>: a bridge from the use of null values to optional values. Returns <code>Optional.of(obj)</code> if obj is not null, otherwise, <code>Optional.empty()</code></p>
<h3 id="Composing-Optional-Value-Functions-with-flatMap"><a href="#Composing-Optional-Value-Functions-with-flatMap" class="headerlink" title="Composing Optional Value Functions with flatMap"></a>Composing Optional Value Functions with <code>flatMap</code></h3><p>Suppose you have a method <code>f</code> yielding an <code>Optional&lt;T&gt;</code>, and the target type <code>T</code> has a method <code>g</code> yielding an <code>Optional&lt;U&gt;</code>.<br>If they were normal methods, you could compose them by call s.f().g(). This doesn’t work for Optionals because <code>s.f()</code> has type <code>Optional&lt;T&gt;</code>, not <code>T</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Optional&lt;U&gt; result = s.f().flatMap(T::g);</div></pre></td></tr></table></figure></p>
<p>If <code>s.f()</code> is present, then <code>g</code> is applied to it. Otherwise, an empty <code>Optional&lt;U&gt;</code> is returned. </p>
<p>Chaining <code>flatMap</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Optional&lt;Double&gt; result = Optional.of(-<span class="number">4.0</span>).flatMap(Test::inverse).flatMap(Test::squareRoot);</div></pre></td></tr></table></figure></p>
<p>If either the <code>inverse</code> method or the <code>squareRoot</code> returns <code>Optional.empty()</code>, the result is empty. </p>
<p>The <code>flatMap</code> method of Optional works in the same way if you consider an optional value to be a stream of size zero or one. </p>
<h2 id="Reduction-Operations"><a href="#Reduction-Operations" class="headerlink" title="Reduction Operations"></a>Reduction Operations</h2><p>If you want to compute a sum, or combine the elements of a stream to a result in another way, use one of the <code>reduce</code> methods. </p>
<p>The <code>reduce</code> method below computes v<sub>0</sub>+v<sub>1</sub>+v<sub>2</sub>+…<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; values = ...;</div><div class="line">Optional&lt;Integer&gt; sum = values.reduce((x, y) -&gt; x + y); <span class="comment">// or values.reduce(Integer::sum);</span></div></pre></td></tr></table></figure></p>
<p>The method returns an <code>Optional</code> because there is no valid result if the stream is empty. </p>
<p>In general, if the <code>reduce</code> method has a reduction operation <em>op</em>, the reduction yields v<sub>0</sub> <em>op</em> v<sub>1</sub> <em>op</em> v<sub>2</sub> <em>op</em> …, where we write v<sub>i</sub> <em>op</em> v<sub>i+1</sub> for the function call <em>op</em>(v<sub>i</sub>, v<sub>i+1</sub>)<br>The operation should be associative: it should not matter in which order you combine the elements. </p>
<p>Useful associative operations: sum, product, string concatenation, maximum, minimum, set union and intersection.</p>
<p>subtraction is not associative. </p>
<p><em>identity</em>: e such that e op x = x. E.g, 0 is the identity for addition.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; values = ...;</div><div class="line">Integer sum = values.reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</div></pre></td></tr></table></figure></p>
<p>The identity value is returned if the stream is empty, and you no longer need to deal with the <code>Optional</code> class. </p>
<p>Simple form of <code>reduce</code> requires a function <code>(T, T) -&gt; T</code>, with the same types for the arguments and the result. </p>
<p>If you want to calculate all lengths in a stream of strings, you need to use accumulator.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> result = words.reduce(<span class="number">0</span>, </div><div class="line">  (total, word) -&gt; total + word.length(), <span class="comment">// accumulator is called repeatedly forming the cumulative total</span></div><div class="line">  (total1, total2) -&gt; total1 + total2); <span class="comment">// combine multiple totals</span></div></pre></td></tr></table></figure></p>
<p>Easier to map to a stream of numbers and use one of its methods to compute sum, max or min.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">words.mapToInt(String::length).sum(); <span class="comment">// simpler and more efficient</span></div></pre></td></tr></table></figure></p>
<h2 id="Collecting-Results"><a href="#Collecting-Results" class="headerlink" title="Collecting Results"></a>Collecting Results</h2><p>Just want to look at the result. </p>
<p><code>iterator</code>: yields an old fashioned iterator that you can use to visit the elements.<br><code>toArray</code>: get an array of the stream elements. </p>
<p><code>stream.toArray()</code> returns an <code>Object[]</code> array. If you want an array of the correct type, pass in the array constructor:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String[] result = words.toArray(String[]::<span class="keyword">new</span>);</div></pre></td></tr></table></figure></p>
<p><code>collect</code>: takes 3 arguments</p>
<ol>
<li>A <em>supplier</em> to make new instances of the target object, e.g, a constructor for hash set</li>
<li>An <em>accumulator</em> that adds an element to the target, e.g, an <code>add</code> method</li>
<li>A <em>combiner</em> that merges 2 objects into 1, such as <code>addAll</code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HashSet&lt;String&gt; result = stream.collect(HashSet::<span class="keyword">new</span>, HashSet::add, HashSet:addAll);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>The target object need not to be a collection. It could be a <code>StringBuilder</code> or an object that tracks a count and a sum. </p>
<p><code>Collector</code>: convenient interface<br><code>Collectors</code>: class with factory methods for common collectors<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// collect a stream into a list or set</span></div><div class="line">List&lt;String&gt; list = stream.collect(Collectors.toList());</div><div class="line">Set&lt;String&gt; set = stream.collect(Collectors.toSet());</div></pre></td></tr></table></figure></p>
<p>Control which kind of set you get<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TreeSet&lt;String&gt; result = stream.collect(Collectors.toCollection(TreeSet::<span class="keyword">new</span>));</div></pre></td></tr></table></figure></p>
<p>Collect all strings in a stream by concatenating them<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String result = stream.collect(Collectors.joining());</div></pre></td></tr></table></figure></p>
<p>Add delimiter between elements<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String result = stream.collect(Collectors.joining(<span class="string">","</span>));</div></pre></td></tr></table></figure></p>
<p>Convert non-string to string first<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String result = stream.map(Object::toString).collect(Collectors.joining(<span class="string">","</span>));</div></pre></td></tr></table></figure></p>
<p>If you want to reduce the stream results to a sum, average, maximum, or minimum, use one of the methods <code>summarizing(Int|Long|Double)</code>. These methods take a function that maps the stream objects to a number and yield a result of type <code>(Int|Long|Double)SummaryStatistics</code>, with methods for obtaining the sum, average, maximum and minimum.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntSummaryStatistics summary = words.collect(Collectors.summarizingInt(String::length));</div><div class="line"><span class="keyword">double</span> averageWordLength = summary.getAverage();</div><div class="line"><span class="keyword">double</span> maxWordLength = summary.getMax();</div></pre></td></tr></table></figure></p>
<p><code>forEach</code>: just want to print them or put them in a database<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stream.forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>On a parallel stream, you must ensure that the function can be executed concurrently. </p>
<p><code>forEachOrdered</code>: execute in stream order. No parallelism benefits anymore. </p>
<p><code>forEach</code> and <code>forEachOrdered</code> are terminal operations. If you want to continue using the stream, use <code>peek</code> instead. </p>
<h2 id="Collecting-into-Maps"><a href="#Collecting-into-Maps" class="headerlink" title="Collecting into Maps"></a>Collecting into Maps</h2><p>Suppose you want to collect the elements in <code>Stream&lt;Person&gt;</code> into a map so that you can later look up people by their id.<br><code>Collectors.toMap</code>: has 2 function arguments that produce the map keys and values<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;Integer, String&gt; idToName = people.collect(Collectors.toMap(Person::getId, Person::getName));</div></pre></td></tr></table></figure></p>
<p><code>Funtion.identity()</code>: values should be the actual elements<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;Integer, Person&gt; idToPerson = people.collect(Collectors.toMap(Person::getId), Function.identity());</div></pre></td></tr></table></figure></p>
<p>If there is more than one element with the same key, the collector will throw an <code>IllegalStateException</code>. Supply a third function argument that determines the value for the key, given the existing and the new value. </p>
<p>Construct a map that contains, for each language in the available locales, as key its name in your default locale(such as “German”), and as value its localized name(such as “Deutsch”).<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Locale&gt; locales = Stream.of(Locale.getAvailableLocales());</div><div class="line">Map&lt;String, String&gt; languageNames = locales.collect(Collectors.toMap(</div><div class="line">  l -&gt; l.getDisplayLanguage(), </div><div class="line">  l -&gt; l.getDisplayLanguage(l), </div><div class="line">  (existingValue, newValue) -&gt; existingValue)); <span class="comment">// keep old value</span></div></pre></td></tr></table></figure></p>
<p>Suppose we want to know all languages in a given country, we need a <code>Map&lt;String, Set&lt;String&gt;&gt;</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, Set&lt;String&gt;&gt; countryLanguageSets = locales.collect(Collectors.toMap(</div><div class="line">  l -&gt; l.getDisplayCountry(),</div><div class="line">  l -&gt; Collections.singleton(l.getDisplayLanguage()),</div><div class="line">  (a, b) -&gt; &#123;</div><div class="line">    Set&lt;String&gt; r = <span class="keyword">new</span> HashSet&lt;&gt;(a);</div><div class="line">    r.addAll(b);</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">  &#125;</div><div class="line">));</div></pre></td></tr></table></figure></p>
<p>If you want a <code>TreeMap</code>, then you supply the constructor as the 4th argument.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Map&lt;Integer, Person&gt; idToPerson = people.collect(Collectors.toMap(</div><div class="line">  Person::getId,</div><div class="line">  Function.identity(),</div><div class="line">  (existingValue, newValue) -&gt; &#123; <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(); &#125;</div><div class="line">  TreeMap::<span class="keyword">new</span></div><div class="line">));</div></pre></td></tr></table></figure></p>
<p>For each of the <code>toMap</code> methods, there is an equivalent <code>toConcurrentMap</code> method that yields a concurrent map. A single concurrent map is used in the parallel collection process. When used with a parallel stream, a shared map is more efficient than merging maps, but of course, you give up ordering. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chapter-2-The-Stream-API&quot;&gt;&lt;a href=&quot;#Chapter-2-The-Stream-API&quot; class=&quot;headerlink&quot; title=&quot;Chapter 2 The Stream API&quot;&gt;&lt;/a&gt;Chapter 2 The 
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 2</title>
    <link href="http://blog.kiyanpro.com/2016/03/16/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-2/"/>
    <id>http://blog.kiyanpro.com/2016/03/16/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-2/</id>
    <published>2016-03-17T01:31:28.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-2-The-Stream-API"><a href="#Chapter-2-The-Stream-API" class="headerlink" title="Chapter 2 The Stream API"></a>Chapter 2 The Stream API</h1><p>Processing collections of values and specifying what you want to have done, leaving the scheduling of operations to the implementation. E.g, compute the average of the values of a certain method. </p>
<p>Key points:</p>
<ul>
<li>Iterators imply a specific traversal strategy and prohibit efficient concurrent execution. </li>
<li>You can create streams from collections, arrays, generators, or iterators. </li>
<li>Use <code>filter</code> to select elements and <code>map</code> to transform elements. </li>
<li>Other operations for transforming streams include <code>limit</code>, <code>distinct</code>, and <code>sorted</code>. </li>
<li>To obtain a result from a stream, use a reduction operator such as <code>count</code>, <code>max</code>, <code>min</code>, <code>findFirst</code>, or <code>findAny</code>. Some of these methods return an <code>Optional</code> value. </li>
<li>The <code>Optional</code> type is intended as a safe alternative to working with <code>null</code> values. To use it safely, take advantage of the <code>ifPresent</code> and <code>orElse</code> methods. </li>
<li>You can collect stream results in collections, arrays, strings or maps. </li>
<li>The <code>groupingBy</code> and <code>partitioningBy</code> methods of the <code>Collectors</code> class allow you to split the contents of a stream into groups, and to obtain a result for each group. </li>
<li>There are specialized streams for the primitive types, <code>int</code>, <code>long</code>, and <code>double</code>.</li>
<li>When you work with parallel streams, be sure to avoid side effects, and consider giving up ordering constraints. </li>
<li>You need to be familiar with a small number of functional interfaces in order to use the stream library. </li>
</ul>
<h2 id="From-Iteration-to-Stream-Operations"><a href="#From-Iteration-to-Stream-Operations" class="headerlink" title="From Iteration to Stream Operations"></a>From Iteration to Stream Operations</h2><p>Usually iterate over collection’s elements and do some work with each of them. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> count = words.stream().filter(w -&gt; w.length() &gt; <span class="number">12</span>).count();</div></pre></td></tr></table></figure>
<p>The <code>stream</code> method yields a stream for the <code>words</code> list. The <code>filter</code> method returns another stream that contains only the words of length greater than twelve. The <code>count</code> method reduces that stream to a result. </p>
<p>Differences between stream and collections</p>
<ol>
<li>Stream does not store its elements.</li>
<li>Stream operations don’t mutate source. They return new streams that hold the reuslt.</li>
<li>Stream operations are lazy when possible. Not executed until their result is needed. </li>
</ol>
<p>Easily parallelized by changing <code>stream</code> to <code>parallelStream</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> count = words.parallelStream().filter(w -&gt; w.length() &gt; <span class="number">12</span>).count();</div></pre></td></tr></table></figure></p>
<p><strong>What. not how</strong> principle: we describe what needs to be done, don’t specify in which order, or in which thread, this should happen. </p>
<p>Setup a pipeline of operations in 3 stages:</p>
<ol>
<li>Create a stream.</li>
<li>Specify <em>intermediate operations</em> for transforming the initial stream into others</li>
<li>Apply a <em>terminal operation</em> to produce a result.<br>Afterwards, the stream can no longer be used. </li>
</ol>
<p>Stream operations are not executed on the elements in the order in which they are invoked on the streams. Nothing happens until <code>count</code> is called. When the <code>count</code> method asks for the first element, then the <code>filter</code> method starts requesting elements, until it finds one that has length &gt; 12. </p>
<h2 id="Stream-Creation"><a href="#Stream-Creation" class="headerlink" title="Stream Creation"></a>Stream Creation</h2><p>Turn any collection in to a stream with the <code>stream</code> method that Java8 added to the <code>Collection</code> interface</p>
<p>Use the static <code>Stream.of</code> method for arrays<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; words = Stream.of(contents.split(<span class="string">"[\\P&#123;L&#125;+"</span>))</div></pre></td></tr></table></figure></p>
<p>The <code>of</code> method has a varargs parameters<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; song = Stream.of(<span class="string">"gently"</span>, <span class="string">"down"</span>, <span class="string">"the"</span>, <span class="string">"stream"</span>);</div></pre></td></tr></table></figure></p>
<p>Use <code>Array.stream(array, from, to)</code> to make stream from a part of an array. </p>
<p>Use the static <code>Stream.empty</code> method to make a stream with no elements<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; silence = Stream.empty();</div></pre></td></tr></table></figure></p>
<p>2 interfaces for making infinite streams:<br><code>generate</code> takes a function with no arguments(or, an object of the <code>Supplier&lt;T&gt;</code> interface). Whenever a stream value is needed, that function is called to produce a value<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; echos = Stream.generate(() -&gt; <span class="string">"Echo"</span>); <span class="comment">// get a stream of constant values</span></div><div class="line"></div><div class="line">Stream&lt;Double&gt; randoms = Stream.generate(Math::random); <span class="comment">// get a stream of random numbers</span></div></pre></td></tr></table></figure></p>
<p><code>iterate</code> takes a seed value and a function(a <code>UnaryOperator&lt;T&gt;</code>), and repeatedly applies the function to the previous result.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;BigInteger&gt; integers = Stream.iterate(BigInteger.ZERO, n -&gt; n.add(BigInteger.ONE));</div></pre></td></tr></table></figure></p>
<p><code>Pattern</code> class has a method <code>splitAsStream</code> that splits a <code>CharSequence</code> by a regular expression.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// split a string into words</span></div><div class="line">Stream&lt;String&gt; words = Pattern.compile(<span class="string">"[\\P&#123;L&#125;+"</span>).splitAsStream(contents);</div></pre></td></tr></table></figure></p>
<p><code>File.lines</code> method returns a <code>Stream</code> of all lines in a file.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (Stream&lt;String&gt; lines = Files.lines(path)) &#123;</div><div class="line">  <span class="comment">// Do something with lines</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The stream and the underlying file with it will be closed when the <code>try</code> block exits normally or through an exception.</p>
<h2 id="The-filter-map-and-flatMap-Methods"><a href="#The-filter-map-and-flatMap-Methods" class="headerlink" title="The filter.map and flatMap Methods"></a>The filter.map and flatMap Methods</h2><p><code>filter</code>: yields a new stream with all elements that match a certain condition<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// transform a stream of strings into another stream contaning only long words</span></div><div class="line">List&lt;String&gt; wordList = ...;</div><div class="line">Stream&lt;String&gt; words = wordList.stream();</div><div class="line">Stream&lt;String&gt; longWords = words.filter(w -&gt; w.length() &gt; <span class="number">12</span>);</div></pre></td></tr></table></figure></p>
<p>The argument of <code>filter</code> is a <code>Predicate&lt;T&gt;</code>, that is, a function from <code>T</code> to <code>boolean</code></p>
<p><code>map</code>: transform the values in a stream in some way, a function is applied to each element.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// transform all words to lowercase</span></div><div class="line">Stream&lt;String&gt; lowercaseWords = words.map(String::toLowercase);</div><div class="line"></div><div class="line"><span class="comment">// get first character of each word</span></div><div class="line">Stream&lt;Character&gt; firstChars = words.map(s -&gt; s.charAt(<span class="number">0</span>));</div></pre></td></tr></table></figure></p>
<p>Suppose you have </p>
<ul>
<li>a generic type <code>G</code>(such as Stream)</li>
<li>function <code>f</code> from some type <code>T</code> to <code>G&lt;U&gt;</code></li>
<li>function <code>g</code> from <code>U</code> to <code>G&lt;V&gt;</code></li>
</ul>
<p>Then you can compose them, that is, first <code>f</code> and then <code>g</code>, by using <code>flatMap</code>. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// words = [..., "your", "boat", ...];</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">characterStream</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">  List&lt;Character&gt; <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) result.add(c);</div><div class="line">  <span class="keyword">return</span> result.stream();</div><div class="line">&#125;</div><div class="line"><span class="comment">// generate [... ['y', 'o', 'u', 'r'], ['b', 'o', 'a', 't'], ...]</span></div><div class="line">Stream&lt;Stream&lt;Character&gt;&gt; result = words.map(w -&gt; characterStream(w));</div><div class="line"></div><div class="line"><span class="comment">// generate [... 'y', 'o', 'u', 'r', 'b', 'o', 'a', 't', ...]</span></div><div class="line">Stream&lt;Character&gt; letters = words.flatMap(w -&gt; characterStream(w));</div></pre></td></tr></table></figure>
<p>In the above case, <code>G</code> is Stream, <code>T</code> is String, <code>U</code> is Character, <code>V</code> is also Character. </p>
<h2 id="Extracting-Substreams-and-Combining-Streams"><a href="#Extracting-Substreams-and-Combining-Streams" class="headerlink" title="Extracting Substreams and Combining Streams"></a>Extracting Substreams and Combining Streams</h2><p><code>limit</code>: returns a new stream that ends after n elements(or when the original stream ends if it is shorter)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Double&gt; randoms = Stream.generate(Math::random).limit(<span class="number">100</span>);</div></pre></td></tr></table></figure></p>
<p><code>skip</code>: discards the first n elements<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; words = Stream.of(contents.split(<span class="string">"[\\P&#123;L&#125;+"</span>).skip(<span class="number">1</span>));</div></pre></td></tr></table></figure></p>
<p><code>concat</code>: concatenate 2 streams<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Character&gt; combined = Stream.concat(characterStream(<span class="string">"Hello"</span>), characterStream(<span class="string">"World"</span>));</div></pre></td></tr></table></figure></p>
<p>The first strema should not be infinite. </p>
<p><code>peek</code>: yields another stream with the same elements as the original, but a function is invoked every time an element is retrieved.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Obejct[] powers = Stream.iterate(<span class="number">1.0</span>, p -&gt; p * <span class="number">2</span>)</div><div class="line">  .peek(e -&gt; System.out.println(<span class="string">"Fetching "</span> + e))</div><div class="line">  .limit(<span class="number">20</span>).toArray();</div></pre></td></tr></table></figure></p>
<p>This way you can verify that the infinite stream returned by iterate is processed lazily. </p>
<h2 id="Stateful-Transformations"><a href="#Stateful-Transformations" class="headerlink" title="Stateful Transformations"></a>Stateful Transformations</h2><p><code>distinct</code>: yields elements from the original stream, in the same order, except that duplicates are suppressed. The stream must obviously remember the elements that it has already seen.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; uniqueWords = Stream.of(<span class="string">"merrily"</span>, <span class="string">"merrily"</span>, <span class="string">"gently"</span>).distinct();</div></pre></td></tr></table></figure></p>
<p><code>sorted</code>: must see the entire stream and sort it before it can give out any elements. You can’t sort an infinite stream. One for Comparable elements, the other accepts a Comparator. Useful when the sorting process is a part of a stream pipeline.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; longestFirst = words.sorted(Comparator.comparing(String::length).reversed())</div></pre></td></tr></table></figure></p>
<p>The <code>Collections.sort</code> method sorts a collection in place, whereas <code>Stream.sorted</code> returns a new sorted stream. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chapter-2-The-Stream-API&quot;&gt;&lt;a href=&quot;#Chapter-2-The-Stream-API&quot; class=&quot;headerlink&quot; title=&quot;Chapter 2 The Stream API&quot;&gt;&lt;/a&gt;Chapter 2 The 
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java SE 8 For the Really Impatient, Note 1</title>
    <link href="http://blog.kiyanpro.com/2016/03/15/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-1/"/>
    <id>http://blog.kiyanpro.com/2016/03/15/java/Java8ForTheReallyImpatient/Java-SE-8-For-the-Really-Impatient-Note-1/</id>
    <published>2016-03-16T01:12:44.000Z</published>
    <updated>2016-09-17T22:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-1-Lambda-Expressions"><a href="#Chapter-1-Lambda-Expressions" class="headerlink" title="Chapter 1 Lambda Expressions"></a>Chapter 1 Lambda Expressions</h1><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>A block of code was passed to someone - a thread pool, a sort method, or a button. The code was called at some later time. How to work with blocks of code directly in Java? Lambda expression. </p>
<p>Use <code>Integer.compare(x, y)</code> instead of <code>x - y</code> to compare x and y since that computation can overflow. </p>
<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><p>Java is a strong typed language, we must specify type.<br>parameters, the -&gt; arrow, and an expression</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(String first, String second)</div><div class="line">  -&gt; Integer.compare(first.length(), second.length())</div></pre></td></tr></table></figure>
<p>If it doesn’t fit in a single expression, enclose in {}<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(String first, String second) -&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (first.length() &lt; second.length()) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (first.length() &gt; second.length()) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>No parameters, still supply empty parentheses<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">() -&gt; &#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) doWork(); &#125;</div></pre></td></tr></table></figure></p>
<p>Parameter types of a lambda expression can be omitted if they can be inferred<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;String&gt; comp = (first, second) <span class="comment">// same as (String first, String second)</span></div><div class="line">  -&gt; Interger.compare(first.length(), second.length())</div></pre></td></tr></table></figure></p>
<p>If a method has a single parameter with inferred type, you can even omit the parentheses<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">EventHandler&lt;ActionEvent&gt; listener = event -&gt; </div><div class="line">  System.out.println(<span class="string">"Thanks for clicking!"</span>)</div></pre></td></tr></table></figure></p>
<p>Instead of <code>(event) -&gt;</code> or <code>(ActionEvent event) -&gt;</code></p>
<p>Can add annotations or final mofifier<br><code>(@NonNull String name) -&gt; ...</code><br><code>(final String name) -&gt; ...</code></p>
<p>Never specify the result type of a lambda expression. It’s always inferred from context. </p>
<p>It’s illegal for a lambda expression to return a value in some branches but not in others. </p>
<h2 id="Functional-Interfaces"><a href="#Functional-Interfaces" class="headerlink" title="Functional Interfaces"></a>Functional Interfaces</h2><p>An object of an interface with a single abstract method. Such an interface is called a functional interface. Such as Runnable, Comparator…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(words, (first, second) -&gt; Integer.compare(first.length(), second.length()))</div></pre></td></tr></table></figure>
<p><code>Arrays.sort</code> method receives an object of some class that implements <code>Comparator&lt;String&gt;</code>. Invoking the compare method on that object executes the body of the lambda expression. </p>
<p>More efficient, easier to read, short and simple</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">button.setOnAction(event -&gt;</div><div class="line">  System.out.println(<span class="string">"Thanks for clicking!"</span>));</div></pre></td></tr></table></figure>
<p>You cannot assign lambda to an object. Only thing you can do is conversion to functional interface. </p>
<p>There are generic functional interfaces in <code>java.util.function</code> package.<br><code>BiFunction&lt;T, U, R&gt;</code> describes functions with parameter types <code>T</code> and <code>U</code> and return type <code>R</code>. You can save lambda in a variable of that type.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BiFunction&lt;String, String, Integer&gt; comp = (first, second) -&gt; </div><div class="line">  Integer.compare(first.length(), second.length())</div></pre></td></tr></table></figure>
<p>Cannot use in Arrays.sort though.</p>
<p>Tag any functional interface with <code>@FunctionalInterface</code> annotation.<br>Compiler will check that the annotated entity is an interface with a single abstract method.<br>And the Javadoc page includes a statement that your interface is a functional interface. </p>
<p>If the body of a lambda expression may throw a checked exception, that exception needs to be declared in the abstract method of the target interface. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Runnable sleeper = () -&gt; &#123;</div><div class="line">  System.out.println(<span class="string">"Zzz"</span>);</div><div class="line">  Thread.sleep(<span class="number">1000</span>); <span class="comment">// Error: Thread.sleep can throw a checked InterruptedException</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Runnable.run</code> cannot throw any exception. How to fix?</p>
<ol>
<li>catch the exception in the body of the lambda expression</li>
<li>assign the lambda expression to an interface whose single abstract method can throw the exception. e.g, the <code>call</code> method of the <code>Callable</code> interface</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Callable&lt;Void&gt; call = () -&gt; &#123;</div><div class="line">  System.out.println(<span class="string">"Zzz"</span>);</div><div class="line">  Thread.sleep(<span class="number">1000</span>); </div><div class="line">  <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// add this statement</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Method-References"><a href="#Method-References" class="headerlink" title="Method References"></a>Method References</h2><p>When there is already a method that carries out exactly the action that you’d like to pass on to some other code. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">button.setOnAction(System.out::println)<span class="comment">// just pass the println method to the setOnAction method</span></div></pre></td></tr></table></figure>
<p>Equivalent to <code>x -&gt; System.out.println(x)</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(strings, String::compareToIgnoreCase)</div></pre></td></tr></table></figure>
<p>The <code>::</code> operator separates the method name from the name of an object or class</p>
<ul>
<li>object::instanceMethod</li>
<li>Class::staticMethod</li>
<li>Class::instanceMethod</li>
</ul>
<p>The first two cases: the method reference is equivalent to a lambda expression that supplies the parameters of the method.</p>
<p>The third case: the first parameter becomes the target of the method. <code>String::compareToIgnoreCase</code> is the same as <code>(x, y) -&gt; x.compareToIgnoreCase(y)</code></p>
<p>Invoke a method of an enclosing class or its superclass.<br><code>this::equals</code> is the same as <code>x -&gt; this.equals(x)</code><br><code>super::instanceMethod</code> uses this as the target and invokes the superclass version of the given method. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.printlin(<span class="string">"Hello, world!"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcurrentGreeter</span> <span class="keyword">extends</span> <span class="title">Greeter</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</div><div class="line">    Thread t = <span class="keyword">new</span> Thread(<span class="keyword">super</span>::greet);</div><div class="line">    t.start();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In an inner class, capture the this reference of an enclosing class as <code>EnclosingClass.this::method</code> or <code>EnclosingClass.super::method</code></p>
<h2 id="Constructor-References"><a href="#Constructor-References" class="headerlink" title="Constructor References"></a>Constructor References</h2><p>Just like method references, except that the name of method is new.<br><code>Button::new</code> is a reference to a Button constructor. </p>
<p>Which constructor depends on the context. </p>
<p>You can form constructor reference with array types.<br><code>int[]::new</code> is a constructor references with one parameter, the length of the array. </p>
<p>Obtain an array of the correct type instead of object<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Button[] buttons = stream.toArray(Button[]::<span class="keyword">new</span>)</div></pre></td></tr></table></figure></p>
<h2 id="Variable-Scope"><a href="#Variable-Scope" class="headerlink" title="Variable Scope"></a>Variable Scope</h2><p>A lambda expression has 3 ingredients:</p>
<ol>
<li>A block of code</li>
<li>Parameters</li>
<li>Values for the free variables, that is, the variables that are not parameters and not defined inside the code</li>
</ol>
<p>These values have been <em>captured</em> by lambda expression. Technical term is <strong>closure</strong>.<br>A lambda expression can capture the value of a variable in the enclosing scope. </p>
<p>In lambda expression, you can only reference variables whose value does not change.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">repeatMessage</span><span class="params">(String text, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">  Runnable r = () -&gt; &#123;</div><div class="line">    <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</div><div class="line">      count--; <span class="comment">// Error: cannot mutate captured variable</span></div><div class="line">      System.out.println(text);</div><div class="line">      Thread.yield();</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">new</span> Thread(r).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Mutating variables in a lambda expression is not threadsafe. </p>
<p>Trick to update a count in an enclosing local scope in lambda expression<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] counter = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</div><div class="line">button.setOnAction(event -&gt; counter[<span class="number">0</span>]++);</div></pre></td></tr></table></figure></p>
<p>Still not threadsafe. Think twice before using this trick.</p>
<p>Cannot use same variable name as local variables. </p>
<p><code>this</code> in lambda expression refers to the <code>this</code> parameter of the method that creates the lambda.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</div><div class="line">    Runnable runner = () -&gt; &#123; ...;</div><div class="line">      System.out.println(<span class="keyword">this</span>.toString()); ... &#125;;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>this.toString()</code> calls the toString method of the Application object, not the runnable instance.<br>The scope of the lambda expression is nested inside the doWork method, and this has the same meaning anywhere in that method. </p>
<h2 id="Default-Methods"><a href="#Default-Methods" class="headerlink" title="Default Methods"></a>Default Methods</h2><p>In Java 8, the forEach method has been added to the Iterable interface, a superinterface of Collection. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">default</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"John Q. Public"</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>A concrete class that implements the Person interface must provide an implementation of getId<br>but it can choose to keep the implementation of getName or to override it. </p>
<p>Rules when conflict: </p>
<ol>
<li>class wins</li>
<li>provide implementation if at least one has implemented the method</li>
</ol>
<h2 id="Static-Methods-in-Interfaces"><a href="#Static-Methods-in-Interfaces" class="headerlink" title="Static Methods in Interfaces"></a>Static Methods in Interfaces</h2><p>Do not need static methods in a companion class anymore. </p>
<p>Comparator class has a very useful static comparing method that accepts a “key extraction” function and yields a comparator that compares the extracted keys.<br>To compare Person object by name<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Comparator.comparing(Person::getName)</div></pre></td></tr></table></figure></p>
<p>The same as <code>(x, y) -&gt; x.compareToIgnoreCase(y)</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Comparator.comparing(String::length)</div></pre></td></tr></table></figure>
<p>The same as <code>(first, second) -&gt; Integer.compare(first.length(), second.length())</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chapter-1-Lambda-Expressions&quot;&gt;&lt;a href=&quot;#Chapter-1-Lambda-Expressions&quot; class=&quot;headerlink&quot; title=&quot;Chapter 1 Lambda Expressions&quot;&gt;&lt;/a&gt;Ch
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
      <category term="Reading Note" scheme="http://blog.kiyanpro.com/categories/Coding/Reading-Note/"/>
    
    
      <category term="Java" scheme="http://blog.kiyanpro.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Export Index Using Elasticsearch Dump</title>
    <link href="http://blog.kiyanpro.com/2016/03/11/elasticsearch/Export-Index-Using-Elasticsearch-Dump/"/>
    <id>http://blog.kiyanpro.com/2016/03/11/elasticsearch/Export-Index-Using-Elasticsearch-Dump/</id>
    <published>2016-03-11T23:38:21.000Z</published>
    <updated>2016-04-08T04:59:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>A very common problem we encounter in Elasticsearch cluster management is how to copy an index to another cluster. For example, we need to make a back up copy for all our current data, or we need to copy data to staging cluster to test query performance.   </p>
<p>The intuitive way would be manually get all documents under the specific index, create another index using the same settings and mappings, then index all documents to the newly created index. Fortunately, we do not need to do that. There are already several good solutions. One of them is using a third-parth tool named Elasticsearch Dump.   </p>
<h2 id="Elasticsearch-Dump"><a href="#Elasticsearch-Dump" class="headerlink" title="Elasticsearch Dump"></a>Elasticsearch Dump</h2><p>ElasticSearch Dump is a node package for moving and saving indices. To use this handy tool, you need to have node installed before using it.   </p>
<h3 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation[1]"></a>Installation<sup><a href="#References">[1]</a></sup></h3><p>Assume that you already have node, to install it:   </p>
<figure class="highlight bash"><figcaption><span>Install elasticdump</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install elasticdump -g</div></pre></td></tr></table></figure>
<p>You probaly need to add <code>sudo</code> before the above command if there is any permission problem.   </p>
<h3 id="Usages-1"><a href="#Usages-1" class="headerlink" title="Usages[1]"></a>Usages<sup><a href="#References">[1]</a></sup></h3><p>Then <code>elasticdump</code> command should be available from your command line. The command works by specifying an input and an output. Both can be either an elasticsearch url or a file, or even standard io streams from terminal.   </p>
<p>To fully copy an index from production to staging, we provide the command with production hostname, port and index name as input, staging hostname, port and index name as output. We should move the analyzer first, the mapping second, and finally the data. </p>
<figure class="highlight bash"><figcaption><span>Copy an index from production to staging with analyzer and mapping</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">elasticdump \</div><div class="line">  --input=http://production.es.com:9200/my_index \</div><div class="line">  --output=http://staging.es.com:9200/my_index \</div><div class="line">  --<span class="built_in">type</span>=analyzer</div><div class="line">elasticdump \</div><div class="line">  --input=http://production.es.com:9200/my_index \</div><div class="line">  --output=http://staging.es.com:9200/my_index \</div><div class="line">  --<span class="built_in">type</span>=mapping</div><div class="line">elasticdump \</div><div class="line">  --input=http://production.es.com:9200/my_index \</div><div class="line">  --output=http://staging.es.com:9200/my_index \</div><div class="line">  --<span class="built_in">type</span>=data</div></pre></td></tr></table></figure>
<p>I encountered an error when try to dump data. It’s related to how many connections can be set up to target host at one time. If you also have limit on your host, please refer to <code>limit</code> and <code>maxSockets</code> options in the Useful Options table. </p>
<p>We may also specify output as a local file instead of a url.   </p>
<figure class="highlight bash"><figcaption><span>Backup index data to a file</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">elasticdump \</div><div class="line">  --input=http://production.es.com:9200/my_index \</div><div class="line">  --output=/data/my_index_mapping.json \</div><div class="line">  --<span class="built_in">type</span>=mapping</div><div class="line">elasticdump \</div><div class="line">  --input=http://production.es.com:9200/my_index \</div><div class="line">  --output=/data/my_index.json \</div><div class="line">  --<span class="built_in">type</span>=data</div></pre></td></tr></table></figure>
<p>We can pipe the outcome with gzip using stdout.   </p>
<figure class="highlight bash"><figcaption><span>Backup and index to a gzip using stdout</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">elasticdump \</div><div class="line">  --input=http://production.es.com:9200/my_index \</div><div class="line">  --output=$ \</div><div class="line">  | gzip &gt; /data/my_index.json.gz</div></pre></td></tr></table></figure>
<h3 id="Useful-Options"><a href="#Useful-Options" class="headerlink" title="Useful Options"></a>Useful Options</h3><p>There are many options for the elasticdump command. I list a few most useful options with comments in the table below.<br><br></p>
<table>
<thead>
<tr>
<th style="text-align:center">Options</th>
<th style="text-align:left">Explanation</th>
<th style="text-align:center">Default</th>
<th style="text-align:left">Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">limit</td>
<td style="text-align:left">How many objects to move in bulk per operation limit is approximate for file streams</td>
<td style="text-align:center">100</td>
<td style="text-align:left">Can avoid too much traffic generate at one time</td>
</tr>
<tr>
<td style="text-align:center">debug</td>
<td style="text-align:left">Display the elasticsearch commands being used</td>
<td style="text-align:center">false</td>
<td style="text-align:left">Useful when error happens</td>
</tr>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:left">What are we exporting? Can be data, mapping, analyzer</td>
<td style="text-align:center">data</td>
<td style="text-align:left">Can export mapping or analyzer instead of data only</td>
</tr>
<tr>
<td style="text-align:center">delete</td>
<td style="text-align:left">Delete documents one-by-one from the input as they are moved. Will not delete the source index</td>
<td style="text-align:center">false</td>
<td style="text-align:left">If you want to remove old data in the meantime</td>
</tr>
<tr>
<td style="text-align:center">searchBody</td>
<td style="text-align:left">Preform a partial extract based on search results</td>
<td style="text-align:center">{“query”: { “match_all”: {} } }</td>
<td style="text-align:left">Provide query to customize target data</td>
</tr>
<tr>
<td style="text-align:center">all</td>
<td style="text-align:left">Load/store documents from ALL indexes</td>
<td style="text-align:center">false</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">bulk</td>
<td style="text-align:left">Leverage elasticsearch Bulk API when writing documents</td>
<td style="text-align:center">false</td>
<td style="text-align:left">Should use bulk as a default to be more efficient</td>
</tr>
<tr>
<td style="text-align:center">ignore-errors</td>
<td style="text-align:left">Will continue the read/write loop on write error</td>
<td style="text-align:center">false</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">scrollTime</td>
<td style="text-align:left">Time the nodes will hold the requested search in order.</td>
<td style="text-align:center">10m</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">maxSockets</td>
<td style="text-align:left">How many simultaneous HTTP requests can we process make?</td>
<td style="text-align:center">5 [node &lt;= v0.10.x]<br>Infinity [node &gt;= v0.11.x]</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">help</td>
<td style="text-align:left">This page</td>
<td style="text-align:center">-</td>
<td style="text-align:left">Check help if you forget some options</td>
</tr>
</tbody>
</table>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Elasticsearch Dump satisfies the need adequately. </p>
<p>There are also some other options. The native solution would be the Snapshot &amp; Restore<sup><a href="#References">[2]</a></sup>. Or you can use plugins like Elasticsearch InOut<sup><a href="#References">[3]</a></sup> and Elasticsearch knapsack<sup><a href="#References">[4]</a></sup>. In addition to that, you can use other third-party tools like ElasticSearch Exporter<sup><a href="#References">[5]</a></sup>. </p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://github.com/taskrabbit/elasticsearch-dump" target="_blank" rel="external">Elasticsearch-dump Github Page</a>  </li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html" target="_blank" rel="external">Snapshot and Restore, Elasticsearch documentation</a>  </li>
<li><a href="https://github.com/crate/elasticsearch-inout-plugin" target="_blank" rel="external">Elasticsearch Inout Plugin, Github Page</a></li>
<li><a href="https://github.com/jprante/elasticsearch-knapsack" target="_blank" rel="external">Knapsack plugin for Elasticsearch, Github Page</a></li>
<li><a href="https://github.com/mallocator/Elasticsearch-Exporter" target="_blank" rel="external">Elasticsearch Exporter, Github Page</a>  </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A very common problem we encounter in Elasticsearch cluster management is how to copy an index to another cluster. For example, we need t
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.kiyanpro.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Reroute Unassigned Shards</title>
    <link href="http://blog.kiyanpro.com/2016/03/06/elasticsearch/reroute-unassigned-shards/"/>
    <id>http://blog.kiyanpro.com/2016/03/06/elasticsearch/reroute-unassigned-shards/</id>
    <published>2016-03-06T23:24:55.000Z</published>
    <updated>2016-04-08T04:59:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Red-Cluster"><a href="#Red-Cluster" class="headerlink" title="Red Cluster!"></a>Red Cluster!</h2><p>There are 3 cluster states:   </p>
<blockquote>
<ol>
<li>green: All primary and replica shards are active</li>
<li>yellow: All primary shards are active, but not all replica shards are active</li>
<li>red: Not all primary shards are active </li>
</ol>
</blockquote>
<p>When cluster health is red, it means cluster is dead. And that means you can do nothing until it’s recovered, which is very bad indeed. I will share with you how to deal with one common situation: <strong>when cluster is red due to unassigned shards</strong>.  </p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><p>The general idea is pretty simple: find those shards which are unassigned, manually assign them to a node with reroute API. Let’s see how we can do that step by step. Then we can combine them into a configurable simple script. </p>
<h3 id="Step-1-Check-Unassigned-Shards"><a href="#Step-1-Check-Unassigned-Shards" class="headerlink" title="Step 1: Check Unassigned Shards"></a>Step 1: Check Unassigned Shards</h3><p>To get cluster information, we usually use cat APIs. There is a <code>GET /_cat/shards</code> endpoint to show a detailed view of what nodes contain which shards<sup><a href="#References">[1]</a></sup>. </p>
<figure class="highlight bash"><figcaption><span>Cat shards</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cat shards verbose</span></div><div class="line">curl <span class="string">"http://your.elasticsearch.host.com:9200/_cat/shards?v"</span></div><div class="line"></div><div class="line"><span class="comment"># cat shards index</span></div><div class="line">curl <span class="string">"http://your.elasticsearch.host.com:9200/_cat/shards/wiki2"</span></div><div class="line"><span class="comment"># example return</span></div><div class="line"><span class="comment"># wiki2 0 p STARTED 197 3.2mb 192.168.56.10 Stiletto</span></div><div class="line"><span class="comment"># wiki2 1 p STARTED 205 5.9mb 192.168.56.30 Frankie Raye</span></div><div class="line"><span class="comment"># wiki2 2 p STARTED 275 7.8mb 192.168.56.20 Commander Kraken</span></div></pre></td></tr></table></figure>
<p>By piping cat shards to fgrep, we can get all unassigned shards.<br><figure class="highlight bash"><figcaption><span>Get unassigned shards</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cat shards with fgrep</span></div><div class="line">curl <span class="string">"http://your.elasticsearch.host.com:9200/_cat/shards"</span> | fgrep UNASSIGNED</div><div class="line"><span class="comment"># example return</span></div><div class="line"><span class="comment"># wiki1 0 r UNASSIGNED ALLOCATION_FAILED</span></div><div class="line"><span class="comment"># wiki1 1 r UNASSIGNED ALLOCATION_FAILED</span></div><div class="line"><span class="comment"># wiki1 2 r UNASSIGNED ALLOCATION_FAILED</span></div></pre></td></tr></table></figure></p>
<p>If you don’t want to deal with shell script, you can also find these unassigned shards using another endpoint <code>POST /_flush/synced</code><sup><a href="#References">[2]</a></sup>. This endpoint is actually not just some information. It allows an administrator to initiate a synced flush manually. This can be particularly useful for a planned (rolling) cluster restart where you can stop indexing and don’t want to wait the default 5 minutes for idle indices to be sync-flushed automatically. It returns with a json response.  </p>
<figure class="highlight bash"><figcaption><span>_flush/synced</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XPOST <span class="string">"http://your.elasticsearch.host.com:9200/twitter/_flush/synced"</span></div></pre></td></tr></table></figure>
<p>If there are failed shards in the response, we can iterate through a failures array to get all unassigned ones.<br><figure class="highlight json"><figcaption><span>Example response with failed shards</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"_shards"</span>: &#123;</div><div class="line">      <span class="attr">"total"</span>: <span class="number">4</span>,</div><div class="line">      <span class="attr">"successful"</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">"failed"</span>: <span class="number">1</span></div><div class="line">   &#125;,</div><div class="line">   <span class="attr">"twitter"</span>: &#123;</div><div class="line">      <span class="attr">"total"</span>: <span class="number">4</span>,</div><div class="line">      <span class="attr">"successful"</span>: <span class="number">3</span>,</div><div class="line">      <span class="attr">"failed"</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">"failures"</span>: [</div><div class="line">         &#123;</div><div class="line">            <span class="attr">"shard"</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">"reason"</span>: <span class="string">"unexpected error"</span>,</div><div class="line">            <span class="attr">"routing"</span>: &#123;</div><div class="line">               <span class="attr">"state"</span>: <span class="string">"STARTED"</span>,</div><div class="line">               <span class="attr">"primary"</span>: <span class="literal">false</span>,</div><div class="line">               <span class="attr">"node"</span>: <span class="string">"SZNr2J_ORxKTLUCydGX4zA"</span>,</div><div class="line">               <span class="attr">"relocating_node"</span>: <span class="literal">null</span>,</div><div class="line">               <span class="attr">"shard"</span>: <span class="number">1</span>,</div><div class="line">               <span class="attr">"index"</span>: <span class="string">"twitter"</span></div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">      ]</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Step-2-Reroute"><a href="#Step-2-Reroute" class="headerlink" title="Step 2: Reroute"></a>Step 2: Reroute</h3><p>The reroute command allows to explicitly execute a cluster reroute allocation command including specific commands<sup><a href="#References">[3]</a></sup>  . An unassigned shard can be explicitly allocated on a specific node.</p>
<figure class="highlight bash"><figcaption><span>Reroute example</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">curl -XPOST <span class="string">'localhost:9200/_cluster/reroute'</span> -d <span class="string">'&#123;</span></div><div class="line">    "commands" : [ &#123;</div><div class="line">        "move" :</div><div class="line">            &#123;</div><div class="line">              "index" : "test", "shard" : 0,</div><div class="line">              "from_node" : "node1", "to_node" : "node2"</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          "allocate" : &#123;</div><div class="line">              "index" : "test", "shard" : 1, "node" : "node3"</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;'</div></pre></td></tr></table></figure>
<p>There are 3 kinds of commands you can use: </p>
<blockquote>
<p>move: Move a started shard from one node to another node. Accepts index and shard for index name and shard number, from_node for the node to move the shard from, and to_node for the node to move the shard to.</p>
<p>cancel: Cancel allocation of a shard (or recovery). Accepts index and shard for index name and shard number, and node for the node to cancel the shard allocation on. It also accepts allow_primary flag to explicitly specify that it is allowed to cancel allocation for a primary shard. This can be used to force resynchronization of existing replicas from the primary shard by cancelling them and allowing them to be reinitialized through the standard reallocation process.</p>
<p><strong>allocate</strong>: Allocate an unassigned shard to a node. Accepts the index and shard for index name and shard number, and node to allocate the shard to. It also accepts allow_primary flag to explicitly specify that it is allowed to explicitly allocate a primary shard (might result in data loss).  </p>
</blockquote>
<p>Combining step 2 with the unassigned shards from Step 1, we can reroute all unassigned shards 1 by 1, thus getting faster cluster recovery from red state.  </p>
<h2 id="Example-Solutions"><a href="#Example-Solutions" class="headerlink" title="Example Solutions"></a>Example Solutions</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Below is a python script I wrote using <code>POST /_flush/synced</code> and <code>POST /reroute</code>  </p>
<script src="//gist.github.com/bc83e96bb818c6ac311a.js?file=reroute.py"></script>
<h3 id="Shell-Script"><a href="#Shell-Script" class="headerlink" title="Shell Script"></a>Shell Script</h3><p>Below is a shell script I found elsewhere in a blog post<sup><a href="#References">[4]</a></sup>  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> shard <span class="keyword">in</span> $(curl -XGET http://localhost:9200/_cat/shards | grep UNASSIGNED | awk <span class="string">'&#123;print $2&#125;'</span>); <span class="keyword">do</span></div><div class="line">    curl -XPOST <span class="string">'localhost:9200/_cluster/reroute'</span> -d <span class="string">'&#123;</span></div><div class="line">        "commands" : [ &#123;</div><div class="line">              "allocate" : &#123;</div><div class="line">                  "index" : "t37", # index name</div><div class="line">                  "shard" : $shard,</div><div class="line">                  "node" : "datanode15", # node name</div><div class="line">                  "allow_primary" : true</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;'</div><div class="line">    sleep 5</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<h2 id="Possible-Unassigned-Shard-Reasons"><a href="#Possible-Unassigned-Shard-Reasons" class="headerlink" title="Possible Unassigned Shard Reasons"></a>Possible Unassigned Shard Reasons</h2><p>FYI, these are the possible reasons for a shard be in a unassigned state<sup><a href="#References">[1]</a></sup>:  </p>
<p><br></p>
<table>
<thead>
<tr>
<th style="text-align:center">Name</th>
<th style="text-align:left">Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">INDEX_CREATED</td>
<td style="text-align:left">Unassigned as a result of an API creation of an index</td>
</tr>
<tr>
<td style="text-align:center">CLUSTER_RECOVERED</td>
<td style="text-align:left">Unassigned as a result of a full cluster recovery</td>
</tr>
<tr>
<td style="text-align:center">INDEX_REOPENED</td>
<td style="text-align:left">Unassigned as a result of opening a closed index</td>
</tr>
<tr>
<td style="text-align:center">DANGLING_INDEX_IMPORTED</td>
<td style="text-align:left">Unassigned as a result of importing a dangling index</td>
</tr>
<tr>
<td style="text-align:center">NEW_INDEX_RESTORED</td>
<td style="text-align:left">Unassigned as a result of restoring into a new index</td>
</tr>
<tr>
<td style="text-align:center">EXISTING_INDEX_RESTORED</td>
<td style="text-align:left">Unassigned as a result of restoring into a closed index</td>
</tr>
<tr>
<td style="text-align:center">REPLICA_ADDED</td>
<td style="text-align:left">Unassigned as a result of explicit addition of a replica</td>
</tr>
<tr>
<td style="text-align:center"><strong>ALLOCATION_FAILED</strong></td>
<td style="text-align:left">Unassigned as a result of a failed allocation of the shard</td>
</tr>
<tr>
<td style="text-align:center">NODE_LEFT</td>
<td style="text-align:left">Unassigned as a result of the node hosting it leaving the cluster</td>
</tr>
<tr>
<td style="text-align:center">REROUTE_CANCELLED</td>
<td style="text-align:left">Unassigned as a result of explicit cancel reroute command</td>
</tr>
<tr>
<td style="text-align:center">REINITIALIZED</td>
<td style="text-align:left">When a shard moves from started back to initializing, for example, with shadow replicas</td>
</tr>
<tr>
<td style="text-align:center">REALLOCATED_REPLICA</td>
<td style="text-align:left">A better replica location is identified and causes the existing replica allocation to be cancelled</td>
</tr>
</tbody>
</table>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-shards.html#cat-shards" target="_blank" rel="external">ElasticSearch Document Cat Shards</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-synced-flush.html" target="_blank" rel="external">ElasticSearch Document Synced Flush</a>  </li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.2/cluster-reroute.html" target="_blank" rel="external">ElasticSearch Document Cluster Reroute</a></li>
<li><a href="https://t37.net/how-to-fix-your-elasticsearch-cluster-stuck-in-initializing-shards-mode.html" target="_blank" rel="external">How to fix your elasticsearch cluster stuck in initializing shards mode?</a>  </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Red-Cluster&quot;&gt;&lt;a href=&quot;#Red-Cluster&quot; class=&quot;headerlink&quot; title=&quot;Red Cluster!&quot;&gt;&lt;/a&gt;Red Cluster!&lt;/h2&gt;&lt;p&gt;There are 3 cluster states:   &lt;/
    
    </summary>
    
      <category term="Coding" scheme="http://blog.kiyanpro.com/categories/Coding/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.kiyanpro.com/tags/Elasticsearch/"/>
    
  </entry>
  
</feed>
